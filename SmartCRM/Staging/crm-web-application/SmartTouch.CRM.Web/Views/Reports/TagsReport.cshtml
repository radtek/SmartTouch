@model SmartTouch.CRM.ApplicationServices.ViewModels.TagViewModel
@{
    ViewBag.Title = "Tags";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var Details = ViewBag.tagId;
    short ItemsPerPage = ViewBag.ItemsPerPage;
    var reportType = ViewBag.ReportType;
    var reportId = ViewBag.ReportId;
}
@*<script src="~/Scripts/ViewModels/TagViewModel.js"></script>*@

@Scripts.Render("~/bundles/tagviewmodel")

<script>
    function createCookie(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
        } else var expires = "";
        document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
    }

    var contactDtls = '@(Details)';
    if (contactDtls == 0) {
        localStorage.removeItem("tagsearchtext");
        createCookie("tagpagenumber", 1, 1); createCookie("tagpagesize", '@(ItemsPerPage)', 1);
    }
    function additionalInfo() {
        return {
            name: localStorage.getItem("tagsearchtext")
        }
    }
    var ReportType = '@(reportType)';
    var ReportId = '@(reportId)';
</script>

<div id="UserList" class="sub-container" >
    <ul class="breadcrumb mbl">
        <li><a href="/reports">[|Reports|]</a></li>
        <li class="active"><a href="javascript:void(0)">[|Tags|]</a></li>
    </ul>
    <div class="main-header mbl">
    <div class="page-title">[|Tags|]</div>
        </div>
    <div class="tags-grid">
        @(Html.Kendo().Grid<SmartTouch.CRM.ApplicationServices.ViewModels.TagViewModel>()
    .Name("grid")
    .HtmlAttributes(new { @class = "k-grid-content" })
    .AutoBind(true)
    .Pageable(pageable => pageable
            .Refresh(false)
            .PageSizes(true)
            .ButtonCount(10).Messages(m => m
            .Display("[|Showing|] {0}-{1} [|from|] {2:n0} [|Tag(s)|]")
            .Empty("[|No tags to display|]").ItemsPerPage("[|Tags per page|]")))
    .Columns(columns =>
    {
        columns.Bound(e => e.TagName).Title("[|Tags|]").Sortable(true).HeaderHtmlAttributes(new { });
        columns.Bound(e => e.Count).Title("[|Contacts Tagged|]").Sortable(true).HeaderHtmlAttributes(new { @class = "text-center" });
        
    }).ToolBar(toolbar =>
    {
        toolbar.Template(@<text>
            <div class="toolbar grid-ct-header">
             
                 
                <div class="right-part">
                    <div class="grid-search">
                        <input type="search" id="txtSearch" onkeydown="GetTagsBasedonsearch(this);" class=" form-control" placeholder="[|Search|]" />
                        <i class="icon st-icon-search-2"></i>
                    </div>
                    <a class="k-button k-button-icontext cu-grid-excel" style="position:relative;top:9px;" id="excelexport">[|Export to Excel|]</a>
                </div>
            </div>
        </text>);
       
    })
       
             .ClientRowTemplate(
                                                                                                     @"<tr class='odd'>
           <td ><span class=''> #:TagName#</span></td><td class ='text-center'><span class=''><span><a href='/tagreportcontacts?TagID=#:TagID#&reportType=#=ReportType#&reportId=#=ReportId#'> </span>#:Count#</span></td>
         </tr>")
                     
                               
                               .ClientAltRowTemplate(
                                                                                                                                         @"<tr class='even'>
           <td > <span class=''>#:TagName#</span></td><td class ='text-center'><span class=''><span><a href='/tagreportcontacts?TagID=#:TagID#&reportType=#=ReportType#&reportId=#=ReportId#'> </span>#:Count#</span></td>
        </tr>").Sortable().Resizable(resize => resize.Columns(true))
                          .Events(events => events.DataBinding("onDataBinding").DataBound("onDataBound"))
                              .DataSource(dataSource => dataSource
                              .Ajax()
                              .PageSize(ItemsPerPage)
                                                          .Read(read => read.Action("TagsViewRead", "Reports").Data("additionalInfo"))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                              )
        )
    </div>
</div>

<script>

    var searchText;

    function GetTagsBasedonsearch(e) {
        setTimeout(function () {

            var enterKeyPressCode = 13;
            if (searchText !== $("#txtSearch").val() || (searchText === $("#txtSearch").val() && e.keyCode == enterKeyPressCode))
                searchText = $("#txtSearch").val();
            else
                return;

            $filter = new Array();
            var grid = $("#grid").data("kendoGrid"), searchBox = $("#txtSearch").val(), userType = $("#userTypes").val();
            localStorage.removeItem("tagsearchtext");
            if ($.trim(searchBox).length > 1) {
                localStorage.removeItem("tagsearchtext");
                localStorage.setItem("tagsearchtext", searchBox);
                //$("#grid").data("kendoGrid").dataSource.read();
                var psize = readCookie("tagpagesize");
                grid.dataSource.query({ page: 1, pageSize: psize });
                appendCheckbox();
            }
            else if ($.trim(searchBox).length === 0) {
                localStorage.removeItem("tagsearchtext");
                $("#grid").data("kendoGrid").dataSource.read();
                appendCheckbox();
            }
        }, 500);
    }


    

    function onDataBinding(arg) {
        setTimeout(function () {
            appendCheckbox();
            bindCheckboxchnage('chktag');
            $(".st-icon-edit").parent('a').attr('data-target', '#modal');
            $(".st-icon-merge").parent('a').attr('data-target', '#modal');
        }, 200)
    }

    function onDataBound(e) {
        var colCount = $(".k-grid").find('table colgroup > col').length;
        var dataSource = new kendo.data.DataSource({
            data: ToPageDropdown()
        });
        $("select[data-role='dropdownlist']").data('kendoDropDownList').setDataSource(dataSource);
        if (e.sender.dataSource.view().length == 0) {
            e.sender.table.find('tbody').append('<tr><td colspan="' + colCount +'"><div class="notecordsfound"><div><i class="icon st-icon-browser-windows-2"></i></div><span class="bolder smaller-90">[|No records found|]</span></div></td></tr>')
        }
    }

    function DeleteTag(id, taggedCount ,ruleCount ) {
        var validate = false;
        var tid = 0;
        if (id != 0) {
            tid = [id];
            validate = true;
        }
        else {
            checkedvalues = fnGetChkvalGrid('chktag');
            if (checkedvalues != "") {
                tid = checkedvalues;
                validate = true;
            }
            else {
                validate = false;
                notifyError("[|Please select at least one account|]");
            }
        }

        if (validate) {
            var WEBSERVICE_URL = '@HttpContext.Current.Application["webservice_url"]';
            alertifyReset("Delete Tag", "Cancel");
            alertify.confirm( taggedCount+ " [|items taggged for this tag|]. [|Are you sure you want to delete this Tag|]?", function (e) {
                if (e) {
                    jsondata = JSON.stringify({ 'TagID': tid });
                    varDeleteURL =  "Tag/DeleteTag";
                    jQuery.support.cors = true;
                    $.ajax({
                        url: varDeleteURL,
                        type: 'post',
                        dataType: 'json',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ 'tagIds': jsondata })
                    }).then(function (response) {
                        var filter = $.Deferred()
                        if (response.success) {
                            filter.resolve(response)
                        } else {
                            filter.reject(response.error)
                        }
                        return filter.promise()
                    }).done(function (data) {
                        notifySuccess("[|Successfully deleted tag(s)|]");
                        setTimeout(function () { window.location.href = "tags" }, setTimeOutTimer);
                    }).fail(function (error) {
                        notifyError(error);
                    })
                }
                else {
                    notifyError("[|You've clicked Cancel|]");
                }
            });
        }
    }

    $(document).ready(function () {
        removepageloader();

        $("#txtSearch").val(localStorage.getItem("tagsearchtext"));
        var BASE_URL = '@Url.Content("~/Tag/")';
        var WEBSERVICE_URL = '@HttpContext.Current.Application["webservice_url"]';
        var tagview = @(Html.Raw(Json.Encode(Model)));
        
        var vm = new TagsViewModel(tagview, BASE_URL, WEBSERVICE_URL);
        ko.applyBindings(vm);

        var grid = $('#grid').data('kendoGrid');
        var pno = readCookie("tagpagenumber");
        var psize = readCookie("tagpagesize");
        //grid.dataSource.query({ page: pno, pageSize: psize });
        tableMasterCheckBox('tags-grid');
    });

    var URL = '@Url.Content("~/Reports/")';
    $("#excelexport").click(function (e) {
        console.log("in click");
        ExcelExport();
    });


    function ExcelExport(){
        console.log("in function");
        var ds = new kendo.data.DataSource({
            type: "json",
            transport: {
                read: URL +"TagsExcelExport?name="+ +""
            },
            schema: {
                model: {
                    fields: {
                        TagName: { type: "string" },
                        Count: { type: "number" }
                    
                    }
                }
            }
        });

        var rows = [{
            cells: [
               // First cell
              { value: "Tags" },
               // Second cell
              { value: "Items Tagged" }
            
            ]
        }];

        //using fetch, so we can process the data when the request is successfully completed
        ds.fetch(function(){
            var data = this.data();
            for (var i = 0; i < data.length; i++){
                //push single row for every record
                rows.push({
                    cells: [
                      { value: data[i].TagName },
                      { value: data[i].Count }                   
                    ]
                }) 
            }
            var workbook = new kendo.ooxml.Workbook({
                sheets: [
                  {
                      columns: [
                        // Column settings (width)
                        { autoWidth: true },
                        { autoWidth: true }                      
                      ],
                      // Title of the sheet
                    //  title: "Orders",
                      // Rows of the sheet
                      rows: rows
                  }
                ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({
                dataURI: workbook.toDataURL(),
                fileName: "Tags.xlsx",
                //for Exporting the file in IE9 and Safari Browsers
                proxyURL: "/Reports/ExportToExcel",
                forceProxy: true
            });
        });
    }


    function RunReport(){

        var grid = $('#grid').data("kendoGrid");
        grid.dataSource.fetch();
    }
  
</script>

