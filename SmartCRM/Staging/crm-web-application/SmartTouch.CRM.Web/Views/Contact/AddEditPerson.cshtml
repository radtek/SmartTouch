@using SmartTouch.CRM.ApplicationServices.ViewModels
@using System.Threading
@using SmartTouch.CRM.Web.Utilities
@using SmartTouch.CRM.Entities
@model PersonViewModel
@*<script src="~/Scripts/ViewModels/PersonViewModel.js"></script>*@

@Scripts.Render("~/bundles/contactsaddeditvm")

@{
    var isAdmin = ViewBag.IsAdmin;
    var isSTAdmin = ViewBag.IsSTAdmin;
    var mode = ViewBag.mode;

    List<AppModules> appModules = new List<AppModules>();
    appModules.Add(AppModules.CustomFields);
    appModules.Add(AppModules.ChangeOwner);
    var customeFieldsPermissions = MenuHelper.CheckPermission(appModules);
}



@using (Html.BeginForm("AddPerson", "Contact", FormMethod.Post,
        new { name = "form-data", id = "form" }))
{
    <div class="sub-container form-horizontal-large" style="display:none" data-bind="visible:true">
        <ul class="breadcrumb">
            <li>@Html.ActionLink("[|Contacts|]", "ContactSearch", "Contact", null, null)</li>
            <li class="active">
                <a href="javascript:void(0)">
                    <span data-bind="visible: ContactID() === 0" style="display:none">[|Add Person|]</span>
                    <span data-bind="visible: ContactID() > 0" style="display:none">[|Edit Person|]</span>
                </a>
            </li>
        </ul>

        <div class="main-header">
            <span data-bind="visible: ContactID() === 0" style="display:none">[|Add Person|]</span>
            <span data-bind="visible: ContactID() > 0" style="display:none">[|Edit Person|]</span>
            <!-- ko if: FirstName() || LastName() -->
            <span class="field-status" data-bind="text: ('('+(FirstName() ? FirstName() :'') +' '+(LastName() ? LastName():'')+')')"></span>
            <!-- /ko -->
        </div>


        <div class="formsubheading">[|General|]</div>
        <div class="clearfix">
            <div class="form-group">
                <label class="control-label">[|First Name|] <span class="required">*</span></label>
                <input type="text" placeholder="[|First Name|]" class="form-control" data-bind="value:FirstName, hasFocus:!(FirstName), valueUpdate: 'afterkeydown'" maxlength="75">
            </div>
            <div class="form-group">
                <label class="control-label">[|Last Name|] <span class="required">*</span></label>
                <input type="text" placeholder="[|Last Name|]" class="form-control" data-bind="value:LastName, valueUpdate: 'afterkeydown'" maxlength="75">
            </div>
        </div>
        <div class="clearfix">
            <div class="form-group">
                <label class="control-label">[|Title|]</label>
                <input type="text" id="txtTitle" placeholder="[|Title|]" class="form-control" data-bind="value:Title" maxlength="100">
            </div>
            <div class="form-group">
                <label class="control-label">[|Company Name|]</label>
                <input type="text" id="txtCompanyName" placeholder="[|Company|]" class="form-control" data-bind="value:CompanyName" maxlength="75">
            </div>
        </div>
        <div class="clearfix">

            <div class="form-group">
                <label class="control-label">[|Owner|]<span class="required">*</span></label>
                @if (isAdmin || customeFieldsPermissions.Where(w => w.Module == AppModules.ChangeOwner).Select(s => s.HasPermission).FirstOrDefault())
                {
                    <input data-bind="kendoDropDownList: {dataTextField:'OwnerName',dataValueField:'OwnerId', data: Users ,value:OwnerId,template: templ, optionLabel: 'Select...' }" />
                }
                else
                {
                    <input disabled data-bind="kendoDropDownList: {dataTextField:'OwnerName',dataValueField:'OwnerId', data: Users ,value:OwnerId, template: templ,optionLabel: 'Select...' }" />
                }
                <span data-bind="visible: ContactID() > 0" style="display:none" class="help-block">Note: Red color represents deleted users.</span>
            </div>
            <div class="form-group">
                <label class="control-label">[|Phone|]</label>
                <div data-bind="foreach: Phones">
                    <div class="form-group input-group cu-input-group mbs">
                        <div class="ed-phone">
                            <div>
                                <label class="control-label cu-smmd">[|Country Code|]</label>
                                <input type="text" placeholder="xxx" class="form-control cu-smmd" data-bind="value: CountryCode" maxlength="3" style="width:70px" />
                            </div>
                            <div>
                                <label class="control-label cu-smmd">[|Number|]</label>
                                <input type="text" placeholder="xxx xxx xxxx" class="form-control cu-smmd" data-bind="value: Number" maxlength="16" style="width:180px" />
                            </div>
                            <div>
                                <label class="control-label cu-smmd">[|Extension|]</label>
                                <input type="text" placeholder="xxxxx" class="form-control cu-smmd" data-bind="value: Extension" maxlength="5" style="width:100px" />
                            </div>
                            <div>
                                <label class="control-label cu-smmd">[|Phone Type|]</label>
                                <input class="input-plus-select"
                                       data-bind="kendoDropDownList: {data: $parent.PhoneTypes, value: PhoneType, dataValueField: 'DropdownValueID', dataTextField:'DropdownValue'}" />
                            </div>
                        </div>
                        <div class="ed-primary-contact">
                            <span class="phm primary-cont">
                                <label class="radio-inline">
                                    <input type="radio" name="primaryPhone" data-bind="attr:{id:$index()}, checked:$root.primaryPhone,checkedValue: $data, click: $root.PhoneIs" />
                                    [|Primary|]
                                </label>

                                @*<span class="plm">Primary</span>*@

                                @*<label class="radio" data-bind="attr:{for:$index()+'-radio'}">
                                        <input type="radio" value="" data-toggle="radio" name="primaryPhone" data-bind="attr:{id:$index()+'-radio'}, checked:$root.primaryPhone,checkedValue: $data, click: $root.PhoneIs">
                                        Primary
                                    </label>*@

                            </span>
                        </div>
                        <div class="ed-trash">
                            <span data-bind="visible: IsPrimary() !== true" class="trash-record">
                                <a class="email-trash" data-bind="click: $parent.removePhone" href="javascript:void(0)"><span class="icon st-icon-bin-3"></span></a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="mtm"><a href="javascript:void(0)" data-bind="click: addPhone"><span class="icon st-icon-add prs"></span>[|Add Phone Number|]</a></div>
            </div>
        </div>
        <div class="clearfix">
            <div class="form-group">
                <label class="control-label">[|Email|]</label>
                <div data-bind="foreach: Emails">
                    <div class="form-group input-group mbs cu-input-group ">
                        <div class="ed-email">
                            <input type="email" placeholder="someone@example.com" class="form-control cu-medium" maxlength="256" data-bind="value:EmailId,attr:{id:'Email_'+ $index()}, event: { blur: MailGunValidater.bind($data,$index()) }" />
                        </div>
                        @if (isSTAdmin)
                        {
                            <div class="ed-email ed-pluse-select">
                                <input class="input-plus-select" data-bind="kendoDropDownList: {dataValueField: 'Id', dataTextField:'Type', data:$parent.EmailStatuses, value: EmailStatusValue}" />
                            </div>
                        }
                        else
                        {
                            <div class="ed-status">
                                <span class="st-verified" data-bind="visible: EmailStatusValue() === 51" style="display:none" title="Verified"></span>
                                <span class="st-notverified" data-bind="visible: EmailStatusValue() === 50" style="display:none" title="Unverified"></span>
                                <span class="st-soft-bounce" data-bind="visible: EmailStatusValue() === 52" style="display:none" title="Soft bounce"></span>
                                <span class="st-hard-bounce" data-bind="visible: EmailStatusValue() === 53" style="display:none" title="Hard bounce"></span>
                                <span class="st-unsubscribed" data-bind="visible: EmailStatusValue() === 54" style="display:none" title="Unsubscribed"></span>
                                <span class="st-suppressed" data-bind="visible: EmailStatusValue() === 57" style="display:none" title="Suppressed"></span>
                            </div>
                        }
                        <div class="ed-primary-contact">
                            <span class="phm primary-cont">
                                <label class="radio-inline">
                                    <input type="radio" name="primaryEmail" data-bind="checked:$root.primaryEmail, checkedValue: $data">
                                    [|Primary|]
                                </label>
                            </span>
                        </div>
                        <div class="ed-trash">
                            <span data-bind="visible: IsPrimary() !== true" class="trash-record">
                                <a class="email-trash" data-bind="click: $parent.removeEmail" href="javascript:void(0)"><span class="icon st-icon-bin-3"></span></a>
                            </span>
                            <div data-bind=" attr:{id:'emailStatus_'+ $index()}">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mtm">
                    <a href="javascript:void(0)" data-bind="click: addEmail"><span class="icon st-icon-add prs"></span>[|Add Email|]</a>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">[|Do Not Email|]</label>
                <label data-bind="attr: {'class': DoNotEmail() ?'checkbox checked':'checkbox' }">
                    <input type="checkbox" data-toggle="checkbox" data-bind="checked: DoNotEmail, click: setDoNotEmail" />
                </label>
            </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Oops ! Contact Already Exists</h4>
                    </div>
                    <div class="modal-body">
                        <div data-bind="visible: EmailExist">
                            <span style="font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                A Contact with same email [<a data-bind="visible: HasPermission(), attr:{href:'/editperson?contactId=' + DuplicateContactId() +'&contactType=1'}"><span data-bind="text: ContactEmail"></span></a><span data-bind="visible: !HasPermission(), text: ContactEmail"></span>]
                                already exists. Please click on the Contact Email to update the existing Contact or <a data-bind="attr:{href:'/contacts'}"><span>[|Cancel|]</span></a> to exit without creating the Contact.
                            </span>
                        </div>
                        <div data-bind="visible: NameExist">
                            <span style="font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                A Contact named [<a data-bind="visible: HasPermission(), attr:{href:'/editperson?contactId=' + DuplicateContactId() +'&contactType=1'}"><span data-bind="text: ContactName "></span></a><span data-bind="visible: !HasPermission(), text: ContactName"></span>]
                                already exists. Please click on the Contact Name to update the existing Contact or <a data-bind="attr:{href:'/contacts'}"><span>[|Cancel|]</span></a> to exit without creating the Contact.
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal end -->
        @Html.Partial("~/Views/CustomField/_CustomFieldTemplates.cshtml")
        <div class="tabbable new-tabs">
            <ul class="nav nav-tabs">
                <li class="active" data-bind="click:showGeneralFields"><a href="#contactinfo"><span class="icon st-icon-user-3"></span>[|Contact Details|]</a></li>
                <li data-bind="click:showCustomFields"><a href="#customfields"><span class="icon st-icon-marquee-plus"></span>[|Custom Fields|]</a></li>
            </ul>

            <div class="clearfix tab-content mbn pbn">
                <div class="tab-pane active" id="contactinfo" data-bind="visible:CurrentView()=='generalfields'?true:false">

                    <div class="formsubheading">[|Profile Picture|]</div>
                    <div class="profile-img-upload mbl clearfix">
                        <figure><img id="contactimage" data-bind="attr:{src:Image().ImageContent}" /> </figure>
                        <div class="uploadcontrol pln">
                            <div class="display-inline mtf upload-url">
                                <label class="control-label ">[|URL|]</label>
                                <div class="input-group">
                                    <input type="text" placeholder="Paste your web URL here" id="txtUploadProfileImage" data-bind="value:ProfileImage" class="form-control mbl display-inline">
                                    <a href="#" class="btn btn-m btn-primary input-group-btn" data-bind="click:uploadProfileImage">Upload</a>
                                </div>
                            </div>
                            <div class="display-inline mtf">
                                <label class="control-label ">&nbsp;</label>
                                <div class="mhm">
                                    ([|or|])
                                </div>
                            </div>
                            <div class="display-inline mtf">
                                <label class="control-label">[|Choose picture from local drive|]</label>
                                @(Html.Kendo().Upload()
                                    .Name("file")
                                    .Multiple(false)
                                    .Async(a => a
                                    .AutoUpload(false)
                                    )
                                    .Events(events => events
                                    .Complete("onComplete")
                                    .Progress("onProgress")
                                    .Select("onSelect")
                                    .Upload("onUpload")
                                    )
                                )
                            </div>
                        </div>
                    </div>


                    <div class="formsubheading">[|Social|]</div>
                    <div class="clearfix">
                        <div class="form-group">
                            <label class="control-label">[|Web & Social|]</label>
                            <div data-bind="foreach: SocialMediaUrls">
                                <div class="form-group input-group mbs cu-input-group">
                                    <input type="text" placeholder="http://www.facebook.com/john.doe" class="form-control cu-medium" data-bind="value: URL" maxlength="2083" />
                                    <input class="input-plus-select" data-bind="kendoDropDownList: {data: $parent.SocialMediaUrlTypes, value: MediaType, widget: $parent.widget, change: $parent.updateURLType.bind($data,MediaType)}" />
                                    <span data-bind="if:$index() != 0" class="trash-record">
                                        <a class="email-trash mlm" data-bind="click: $parent.removeSocialMediaUrl" href="javascript:void(0)"><span class="icon st-icon-bin-3"></span></a>
                                    </span>
                                </div>
                            </div>
                            <div class="mtm" data-bind="visible:tempUrlTypes().length>0">
                                <a href="javascript:void(0)" data-bind="click: addSocialMediaUrl"><span class="icon st-icon-add prs"></span>[|Add Web & Social links|]</a>
                            </div>
                        </div>
                    </div>

                    @Html.Partial("~/Views/Shared/_AddressPartial.cshtml")

                    <div class="formsubheading">[|Additional Info|]</div>


                    <div class="clearfix">
                        <div class="form-group" id="cont-licyle">
                            <label class="control-label">[|Life Cycle|]</label>
                            <input data-bind="kendoDropDownList: {dataTextField:'DropdownValue',dataValueField:'DropdownValueID', data: LifecycleStages, value: LifecycleStage, select:LifeCycleStageSelect}" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">[|First Lead Source|] <span class="required">*</span></label>
                            <div class="st-lead-source">
                                <input data-bind="kendoDropDownList: {dataTextField:'DropdownValue',dataValueField:'DropdownValueID', data: LeadSources,select:ContactSourceSelect, value: ContactSourceTypeID,optionLabel:'[|Select Contact Source|]..', enabled : IsFirstLeadSourceVisible }" />
                            </div>
                            <div class="st-cu-edit-icon">
                                <span data-bind="visible: ContactID() > 0"><a href='javascript:void(0)'><i class='icon st-icon-edit' data-bind="click:changeLeadSourceVisibility"></i></a></span>
                            </div>
                            <div class="clearfix"></div>
                            <span class="validationMessage" data-bind="validationMessage:ContactSourceValidation"></span>
                        </div>

                    </div>
                    <div class="clearfix">
                        <div class="form-group" data-bind="visible:showPartner">
                            <div>
                                <label class="control-label">[|Partner Type|]</label>
                                <input data-bind="kendoDropDownList: {dataTextField:'DropdownValue',dataValueField:'DropdownValueID', data: PartnerTypes, value: PartnerType,enabled: enablePartnerType}" />
                                @*,optionLabel:'Select'*@
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">[|Additional Lead Sources|]</label>
                            <select data-bind="multiselect: ContactSecondarySource" class="multiselectwidth" id="test" />
                            <input type="button" value="hidden" style="display:none" />
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="customfields" data-bind="visible:CurrentView()=='customfields'?true:false">
                    @Html.Partial("~/Views/Contact/_EditContactCustomFields.cshtml")
                </div>
            </div>
        </div>


        <div class="hr-border"></div>
        <div>
            <a class="btn btn-lg btn-primary" data-bind="click: function(data, event){ savePerson(1) }"><span data-bind="text:saveText"></span></a>
            <a class="btn btn-lg btn-primary" data-bind="click: function(data, event){ savePerson(2) }"><span>Save and Add Another</span></a>
            @Html.ActionLink("[|Cancel|]", "Contacts", null, new { @class = "btn btn-lg" })
        </div>
    </div>

    <div class="modal fade" id="leadSourceModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Lead Source Update Alert!</h4>
                </div>
                <div class="modal-body">
                    <div data-bind="visible: ContactID() === 0">
                        <span style=" font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                            Please ensure First Lead Source is correct. Any changes after clicking Save will overwrite the original Lead Source value and date and will affect Lead Source reporting.
                        </span>
                    </div>
                    <div data-bind="visible: ContactID() > 0">
                        <span style=" font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                            Changes to First Lead Source will overwrite existing Lead Source value and date and will affect Lead Source reporting.
                        </span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" data-dismiss="modal" class="btn btn-lg btn-primary">OK</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    //var onSelect;
    var viewModel;
    $(document).ready(function(){
        //appendRadio();
        var newAddress = '@Html.Raw(Json.Encode(ViewBag.NewAddress))';

        var BASE_URL = '@Url.Content("~/Contact/")';

        var DropDownURL = '@Url.Content("~/DropdownValues/")';
        var person = @(Html.Raw(Json.Encode(Model)));
        var ImagePath ='@Url.Content("~/img/NoImage.png")';
        var WEBSERVICE_URL = '@HttpContext.Current.Application["webservice_url"]';
        var mailgunPublicKey = '@System.Configuration.ConfigurationManager.AppSettings["mailgun_apikey"]';
        var accountId = '@Thread.CurrentPrincipal.Identity.ToAccountID()';
        var companyNameSuggestions = [];
        var users;

        var userList = function(){
            $.ajax({
                url: '/GetUsersList',
                type: 'get',
                dataType: 'json',
                data:{ 'id': 0},
                contentType: "application/json; charset=utf-8"
            }).then(function (response) {
                var filter = $.Deferred();
                if (response.success) {
                    filter.resolve(response)
                } else {
                    filter.reject(response.error)
                }
                return filter.promise()
            }).done(function (data) {
                users = data.response;
                getCountries();
            }).fail(function (error) {
                notifyError(error);
            });

        }

        var getCountries = function(){
            $.ajax({
                url: BASE_URL + 'GetCountries',
                type: 'get',
                dataType: 'json',
                contentType: "application/json; charset=utf-8"
            }).then(function (response) {            
                var filter = $.Deferred()            
                if (response.success) {                
                    filter.resolve(response)            
                } else {                
                    filter.reject(response.error)            
                }            
                return filter.promise()        
            }).done(function (data) {
                viewModel = new personViewModel(person,data.response, BASE_URL, newAddress, DropDownURL,ImagePath,users);
                $.each(viewModel.SocialMediaUrls(), function(index,value){
                    value.MediaType = ko.observable(value.MediaType);
                    value.Url = ko.observable(value.Url);
                });

                //$.each(viewModel.LifecycleStages(), function(index,value){
                //    value.MediaType = ko.observable(value.TypeId);
                //    value.Name = ko.observable(value.Name);
                //});

                $.each(viewModel.PartnerTypes(), function(index,value){
                    value.TypeId = ko.observable(value.TypeId);
                    value.Name = ko.observable(value.Name);
                });

                ko.applyBindings(viewModel);
            }).fail(function (error) {                           
                notifyError(error);        
            })
        };
        users = userList();

        $(':checkbox').on('change', function() {
            $(this).triggerHandler('click');
        });

        //$(':radio').on('change', function() {
        //    $(this).triggerHandler('click');
        //})
        //$(document).on('change', 'input:radio[id^="phone"]', function (event) {
        //    alert("click fired");
        //});

        //$('input[type=radio]').change(function () {
        //    alert("test  "+ this.checked);
        //    $(this).triggerHandler('click');
        //});

        var typewatch = (function(){
            var timer = 0;
            return function(callback, ms){
                clearTimeout (timer);
                timer = setTimeout(callback, ms);
            }
        })();


        $("#txtCompanyName").kendoAutoComplete({
            minLength: 1,
            placeholder: "Type a company name",
            dataTextField: "Text",
            select: autocomplete_select
        });

        $(document).on('keydown keypress', "#txtCompanyName", function () {
            typewatch(function () {
                var authToken = readCookie("accessToken");
                $.ajax({
                    url:  WEBSERVICE_URL + "/Company/Name",
                    type: 'get',
                    dataType: 'json',
                    data:{ 'query': $("#txtCompanyName").val(), 'accountId': accountId},
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer " + authToken);
                    },
                    success: function (companiesData) {
                        companyNameSuggestions = companiesData.Results;
                        viewModel.CompanyData(companiesData.Results);
                        var autocomplete = $("#txtCompanyName").data("kendoAutoComplete");
                        autocomplete.dataSource.data(companiesData.Results);
                    },
                    error: function (response) {
                        notifyError(response.responseText);            
                    }
                });
            }, 500);
        });

        function autocomplete_select(e) {
            var item = e.item;
            var dataItem = this.dataItem(e.item);
        }



        var txtContactTitle = $("#txtTitle");
        txtContactTitle.bind('keydown keypress', function() {
            typewatch(function() {
                var authToken = readCookie("accessToken");
                $.ajax({
                    url:  WEBSERVICE_URL + "/Person/Title",
                    type: 'get',
                    dataType: 'json',
                    data:{ 'query': txtContactTitle.val()},
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer " + authToken);
                    },
                    success: function(titleData){
                        var suggestions = [];
                        $.each(titleData.Results, function(index,value){
                            suggestions[index] = value.Text;
                        });


                        var dataSource =null;
                        $("#txtTitle").kendoAutoComplete([]);
                        var autocomplete = $("#txtTitle").data("kendoAutoComplete");
                        dataSource = new kendo.data.DataSource({
                            data:suggestions
                        });

                        autocomplete.setDataSource(dataSource);
                    },
                    error: function (response) {                                                        
                        notifyError(response.responseText);            
                    }
                });
            }, 500);
        });


        MailGunValidater = function(id){
            emailData=this;
            if(emailData.IsPrimary() == true && emailData.EmailId() != null && emailData.EmailId() != "")
            {
                $.ajax({
                    url: BASE_URL + 'GetContactIdByName',
                    type: 'post',
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(
                        {
                            'isprimary': emailData.IsPrimary(),
                            'email':emailData.EmailId(),
                            'contactType': 1, 'name': "",
                            'contactId': viewModel.ContactID()
                        }),
                    success: function (data) {
                        if(data.response)
                        {
                            if(data.response.DuplicateContactId > 0)
                            {
                                selfContact.NameExist(false);
                                selfContact.HasPermission(data.response.HasPermission);
                                viewModel.EmailExist(true);
                                viewModel.ContactEmail(data.response.Email);
                                viewModel.DuplicateContactId(data.response.DuplicateContactId);
                                $('#myModal').modal('toggle');
                            }
                            else
                            {
                                var emailValidator = new EmailValidate(id,mailgunPublicKey);
                                emailValidator.validate(id);
                            }
                        }
                        else{
                            var emailValidator = new EmailValidate(id,mailgunPublicKey);
                            emailValidator.validate(id);
                        }

                    },
                    error: function (error) {
                        var emailValidator = new EmailValidate(id,mailgunPublicKey);
                        emailValidator.validate(id);
                        notifyError(error);
                    }
                });
            }
            else
            {
                var emailValidator = new EmailValidate(id,mailgunPublicKey);
                emailValidator.validate(id);
            }
        }




    });



    function  onSelect (e) {

        console.log("in seletct");

        $('.k-file').hide();
        var varImageType="";
        $.each(e.files, function (index, value) {
            var ok = value.extension.toLowerCase() == ".jpg"
                     || value.extension.toLowerCase() == ".jpeg"
                     || value.extension.toLowerCase() == ".png"
                     || value.extension.toLowerCase() == ".bmp";

            if (!ok) {
                e.preventDefault();
                notifyError("Please upload jpg, jpeg, png, bmp files"); return false;
            }
            else if(bytesToSize(e.files[0].size)>3) {
                e.preventDefault();
                notifyError("Image size should not be more than 3 MB");
                return false;
            }
            else {
                $("#txtUploadProfileImage").val('');
                viewModel.ContactImageUrl='';
            }

            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                //  self.imagePath(event.target.result);
                var image = document.getElementById("contactimage");
                image.src = event.target.result;
                viewModel.Image().ImageContent=event.target.result;
            }
            fileReader.readAsDataURL(e.files[0].rawFile);
            viewModel.Image().ImageType= value.extension.toLowerCase();
            viewModel.Image().OriginalName= e.files[0].name;
        });
    }

    function onComplete(e) {
        $('.k-filename').hide();
    }
    function onProgress(e) { getFileInfo(e);$('.k-file').hide();}
    function getFileInfo(e) {

        return $.map(e.files, function (file) {
            var info = file.name;

            var varFullPath = file.rawFile.mozFullPath;
            // File size is not available in all browsers
            if (file.size > 0) {
                info += " (" + Math.ceil(file.size / 1024) + " KB)";
            }
            return info;
        }).join(", ");
    }
    function onUpload(e) {
        $('.k-filename').hide();
    }
    function bytesToSize(bytes) {
        return (bytes/(1024*1024)).toFixed(2);
    }

    //$(':radio').on('change', function() {
    //    alert(12);
    //    $(this).triggerHandler('click');
    //})

</script>
