@using SmartTouch.CRM.ApplicationServices.ViewModels
@using System.Threading
@using System.Linq;
@using System.Web.Mvc
@using SmartTouch.CRM.Web.Utilities
@using SmartTouch.CRM.Entities
@model PersonViewModel
@{
    ViewBag.Title = "Contacts";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var DateFormat = ViewBag.DateFormat;
    var webVisitModule = ViewBag.WebVisits;
    var CurrencyFormat = ViewBag.CurrencyFormat;
    short ItemsPerPage = ViewBag.ItemsPerPage;

    List<AppModules> appModules = new List<AppModules>();
    appModules.Add(AppModules.CustomFields);
    appModules.Add(AppModules.ContactActions);
    appModules.Add(AppModules.ContactNotes);
    appModules.Add(AppModules.ContactTours);
    appModules.Add(AppModules.ContactRelationships);
    appModules.Add(AppModules.Campaigns);
    appModules.Add(AppModules.Forms);
    appModules.Add(AppModules.SendMail);
    appModules.Add(AppModules.SendText);
    appModules.Add(AppModules.LeadAdapter);
    appModules.Add(AppModules.WebAnalytics);
    var Permissions = MenuHelper.CheckPermission(appModules);

}

@Scripts.Render("~/bundles/contactsviewvm")
@Scripts.Render("~/bundles/contactsgridvm")
@Scripts.Render("~/bundles/Opportunityvm")
@using (Html.BeginForm("PersonDetails", "Contact", FormMethod.Post,
                                      new { name = "form-data", id = "form" }))
{
    <div class="ct-details" id="personView" style="display:none" data-bind="visible:true">
        <div class="ct-mainarea">
            <div class="ct-top-details">
                <ul class="breadcrumb border-bottom-none">
                    <li>@Html.ActionLink("[|Contacts|]", "ContactSearch", "Contact", null, null)</li>
                    <li class="active"><a href="javascript:void(0)">[|Contact Details|]</a></li>
                </ul>

                <div class="panel contact-detail">
                    <div class="user-body row" id="appTourContactDetails">
                        <div class="col-md-8 col-lg-8">
                            <div class="clearfix">
                                <div class="profile-pic-control">
                                    <div class="profile-pic">
                                        <a href="#editprofilepic" class="change-picture" data-toggle="modal">Change Picture</a>
                                        <figure>
                                            <img data-bind="attr:{src: Image().ImageContent?Image().ImageContent:'/img/NoImage.png'}" id='contactProfileImage' alt="profile picture" />
                                        </figure>
                                    </div>
                                    <div class="st-edit-profile"><a data-bind="attr: { 'href': '@Url.Action("EditContact", "Contact")?contactId=' + ContactID() +'&contactType=1' }">[|Edit Profile|]</a></div>
                                </div>
                                <div class="user-details">
                                    <div class="edit-field name-field">
                                        <div class="edit-field-label" data-bind="click:function(){ InlineEditing(1)}">
                                            <h6 class="mtn" data-bind="text:Name,attr: { title: FullName }"></h6> <i class="icon st-icon-edit"></i>
                                        </div>
                                        <div class="edit-field-group">
                                            <div class="form-group co-mmrb10">
                                                <label class="control-label">[|First Name|]</label>
                                                <input class="form-control" data-bind="value:FirstName" type="text" maxlength="75" />
                                            </div>
                                            <div class="form-group co-mmrb10">
                                                <label class="control-label">[|Last Name|]</label>
                                                <input class="form-control" data-bind="value:LastName" type="text" maxlength="75" />
                                            </div>
                                            <div class="form-group co-de-buttons">
                                                <label class="control-label">&nbsp;</label>
                                                <button data-bind="click:function(){ InlineSaving(1)}" class="btn btn-default" type="button"><i class="fui-check"></i></button>
                                                <button data-bind="click:function(){ InlineCancel(1)}" class="btn btn-default" type="button"><i class="fui-cross"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                    <!--ko if: (Title() != null || CompanyName() != null)-->

                                    <div class="edit-field title-field">
                                        <div data-bind="click: Title() != null ? function(){ InlineEditing(9)} : null, attr: { 'class': Title() != null ? 'edit-field-label' : ''}">
                                            <p>
                                                <span data-bind="text:Title, visible:Title() != null"></span> <i data-bind="attr: {'class': Title() != null ? 'icon st-icon-edit' : ''}"></i>
                                            </p>
                                        </div>
                                        
                                        <div class="edit-field-group">
                                            <div class="form-group co-mmrb10">
                                                <label class="control-label">[|Title|]</label>
                                                <input class="form-control" id="txtTitle" data-bind="value:Title" type="text" />
                                            </div>
                                            <div class="form-group co-de-buttons">
                                                <label class="control-label">&nbsp;</label>
                                                <button data-bind="click:function(){ InlineSaving(9)}" class="btn btn-default" type="button"><i class="fui-check"></i></button>
                                                <button data-bind="click:function(){ InlineCancel(9)}" class="btn btn-default" type="button"><i class="fui-cross"></i></button>
                                            </div>
                                            <br />
                                        </div>
                                    </div>
                                    <!--/ko-->
                                    <div class="mbm" data-bind="text:CompanyName, visible: CompanyName() != null"></div>
                                    @Html.Partial("_PrimaryContactInformation")

                                    <div class="web-url-icons" data-bind="foreach: SocialMediaUrls">
                                        <a data-bind="visible:MediaType()=='Facebook' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank' }"><i data-bind="attr: { class:'icon st-icon-facebook' }"></i></a>
                                        <a data-bind="visible:MediaType()=='Twitter' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-twitter' }"></i></a>
                                        <a data-bind="visible:MediaType()=='Website' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-website' }"></i></a>
                                        <a data-bind="visible:MediaType()=='LinkedIn' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-linkedin' }"></i></a>
                                        <a data-bind="visible:MediaType()=='Google+' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-google-plus' }"></i></a>
                                        <a data-bind="visible:MediaType()=='Blog' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-blog' }"></i></a>
                                        <a data-bind="visible:MediaType()=='Skype' && URL()!='' && URL()!=null, attr: { href: URL, target:'_blank'}"> <i data-bind="attr: { class:'icon st-icon-skype' }"></i></a>
                                    </div>
                                </div>
                            </div>

                            <div class="Owner">
                                <div class="label">[|Owner|]</div>
                                <div class="status" data-bind="text:OwnerName"></div>
                            </div>

                        </div>

                        <div class="col-md-4 col-lg-4">
                            <ul class="user-counts">
                                <li class="score">
                                    <div class="label">[|Life Cycle|]</div>

                                    <div class="edit-field lifecycle-field">
                                        <div class="edit-field-label" data-bind="click:function(){ InlineEditing(2)}">
                                            <div class="status" data-bind="text:LifeCycle"></div> <i class="icon st-icon-edit"></i>
                                        </div>
                                        <div class="edit-field-group">
                                            <div class="form-group co-mmrb10">
                                                <input data-bind="kendoDropDownList: {dataTextField:'DropdownValue',dataValueField:'DropdownValueID', data: LifecycleStages ,value:LifecycleStage }" />
                                            </div>
                                            <div class="form-group co-de-buttons">
                                                <button data-bind="click:function(){ InlineSaving(2)}" class="btn btn-default" type="button"><i class="fui-check"></i></button>
                                                <button data-bind="click:function(){ InlineCancel(2)}" class="btn btn-default" type="button"><i class="fui-cross"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li class="score">
                                    <div class="label">[|Last Touched|]</div><br />
                                    <div class="status" data-bind="visible:LastTouchedType() != null">
                                        <span data-bind="text:LastTouchedInformation"></span>
                                    </div>
                                </li>
                                <li class="score leadsource-cdp">
                                    <div class="label">[|Lead Source|]</div>
                                    <div class="edit-field leadsource-field">
                                        <div class="edit-field-label" data-bind="click:function(){ InlineEditing(5)}">
                                            <div class="status">
                                                <div class="mul-lead">
                                                    <span data-bind="text: SelectedLeadSource().length > 0  ? SelectedLeadSource()[0].DropdownValue:''"></span>
                                                    <a href="javascript:void(0)" data-bind="visible:(SelectedLeadSource() && SelectedLeadSource().length > 1),tooltip: { title: LastLeadSource, placement: 'right' }">
                                                        <span class="icon st-icon-podcast-2"></span>
                                                    </a>
                                                    <i class="icon st-icon-edit"></i>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="edit-field-group">
                                            <div class="form-group co-mmrb10">
                                                <input data-bind="kendoDropDownList: {dataTextField:'DropdownValue',dataValueField:'DropdownValueID', data: LeadSources ,value:newLeadSourceValueId }" />
                                            </div>
                                            <div class="form-group co-de-buttons">
                                                <button data-bind="click:function(){ InlineSaving(5)}" class="btn btn-default" type="button"><i class="fui-check"></i></button>
                                                <button data-bind="click:function(){ InlineCancel(5)}" class="btn btn-default" type="button"><i class="fui-cross"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                            <div class="clearfix"></div>
                        </div>

                    </div>

                    <!--end of panelbody-->
                    <div id="appTourContactTags">
                        <div class="user-panel-footer">
                            <div class="usertags">
                                <span class="st-custag"><span class="icon st-icon-tag prs"></span>[|Tags|] :</span>
                                <input id="txtContactTags" class="tags-input" data-bind="valueUpdate: 'afterkeydown'" />
                            </div>
                        </div>
                        <div>
                            @{
    Html.RenderPartial("~/Views/Contact/_RecentPopularTagModel.cshtml");
                            }
                        </div>
                    </div>

                </div>

            </div>
            <!--end of panel-->
            <div class="tabbable new-tabs cdp-tabs">
                <ul class="nav nav-tabs" id="contact-details-tabs">
                    @if (webVisitModule == "webvisits")
                    {
                        <li id="appTourContactTimeline"><a href="#timeline"><span class="icon st-icon-timeline"></span>[|Timeline|]</a></li>
                    }
                    else
                    {
                        <li class="active" id="appTourContactTimeline"><a href="#timeline"><span class="icon st-icon-timeline"></span>[|Timeline|]</a></li>
                    }
                    <li id="appTourContactInfo"><a href="#contactinfo"><span class="icon st-icon-user-3"></span>[|Contact Info|]</a></li>
                    <li id="appTourContactAttachements" data-bind="click:function(){ AttachmentViewModel().GetAttachments()}"><a href="#attachments"><span class="icon st-icon-cloud-add"></span>[|Attachments|]</a></li>

                    @*@if (Permissions.Where(s => s.Module == AppModules.CustomFields).Select(s => s.HasPermission).SingleOrDefault())
                        {*@
                    <li id="appTourContactCustomFields" data-bind="click:function(){ GetCustomFieldTabs()}"><a href="#customfields"><span class="icon st-icon-marquee-plus"></span>[|Custom Fields|]</a></li>
                    @*}*@

                    @if (Permissions.Where(s => s.Module == AppModules.WebAnalytics).Select(s => s.HasPermission).SingleOrDefault())
                    {
                        if (webVisitModule == "webvisits")
                        {
                            <li id="appTourContactWebVisits" class="active" data-bind="event:{click:getWebVisits}" id="contactwebvisitstab"><a href="#webvisits" id="showWebVisits"><span class="icon sti-web-visit"></span>[|Web Visits|]</a></li>
                        }
                        else
                        {
                            <li id="appTourContactWebVisits" data-bind="event:{click:getWebVisits}" id="contactwebvisitstab"><a href="#webvisits" id="showWebVisits"><span class="icon sti-web-visit"></span>[|Web Visits|]</a></li>
                        }

                    }
                    <li id="contactsummary-pane" data-bind="event:{click:summaryViewModel.getContactSummary}"><a href="#contactsummary"><span class="icon st-icon-notes"></span>[|Contact Summary|]</a></li>

                </ul>
                <div class="tab-content">
                    <div class="tab-pane" id="contactsummary" >
                        
                        @{
    Html.RenderPartial("_ContactSummary");
                        }
                    </div>

                    @if (webVisitModule == "webvisits")
                    {
                        <div class="tab-pane" data-bind="with:TimeLineViewModel" id="timeline">
                            @{
                        Html.RenderPartial("_TimeLineInfo");
                            }
                        </div>
                    }
                    else
                    {
                        <div class="tab-pane active" data-bind="with:TimeLineViewModel" id="timeline">
                            @{
                        Html.RenderPartial("_TimeLineInfo");
                            }
                        </div>
                    }

                    <div class="tab-pane" id="contactinfo">
                        @{
    Html.RenderPartial("_PersonDetailsContactInfo");
                        }
                    </div>
                    <div class="tab-pane" id="attachments" data-bind="with:AttachmentViewModel">
                        @{
    Html.RenderPartial("_Attachment", new ViewDataDictionary { { "page", "contacts" } });
                        }
                    </div>

                    @*@if (Permissions.Where(s => s.Module == AppModules.CustomFields).Select(s => s.HasPermission).SingleOrDefault())
                        {*@
                    <div class="tab-pane" id="customfields">
                        <div id="customfields-body" data-bind="if:RenderCustomFields()==true" style="min-height: 400px;">
                            @{ Html.RenderPartial("_ViewCustomFields");}
                        </div>
                    </div>
                    @*}*@
                    @if (webVisitModule == "webvisits")
                    {
                        <div class="tab-pane active" id="webvisits">
                            @{
                        Html.RenderPartial("_ContactWebVisits");
                            }
                        </div>
                    }
                    else
                    {
                        <div class="tab-pane" id="webvisits">
                            @{
                        Html.RenderPartial("_ContactWebVisits");
                            }
                        </div>
                    }
                    
                </div>
            </div>
        </div>

        <div class="ct-other-panels" id="persondetials">
            <!-- ko if: HideNavigation()===false-->
            <ul class="previous-next mbl">
                <li>
                    <!-- ko if: EnablePrevious()==true-->
                    <a href='@(Url.Action("PreviousContact","Contact"))'><i class="fui-arrow-left"></i> [|Previous|]</a>
                    <!--/ko-->
                    <!-- ko if: EnablePrevious()==false-->
                    <i class="fui-arrow-left"></i> [|Previous|]
                    <!--/ko-->
                </li>
                <li> - </li>
                <li>
                    <!-- ko if: EnableNext()==true-->
                    <a href="@(Url.Action("NextContact", "Contact"))">[|Next|] <i class="fui-arrow-right"></i></a>
                    <!--/ko-->
                    <!-- ko if: EnableNext()==false-->
                    [|Next|] <i class="fui-arrow-right"></i>
                    <!--/ko-->
                </li>
            </ul>
            <!--/ko-->
            @{
    Html.RenderPartial("_PersonDetails");
            }
        </div>

        <div aria-hidden="false" aria-labelledby="myModalLabel" role="dialog" tabindex="-1" id="editprofilepic" class="modal fade">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title">[|Edit Profile Picture |]</h4>
                    </div>
                    <div class="modal-body">
                        <div class="profile-img-upload mbl clearfix">
                            <figure>
                                <img id='contactimage' data-bind="attr:{src: Image().ImageContent?Image().ImageContent:'/img/NoImage.png'}" alt="profile picture" />
                            </figure>
                            <div class="uploadcontrol pln">
                                <div class="display-inline mtf upload-url">
                                    <label class="control-label ">[|URL|]</label>
                                    <div class="input-group">
                                        <input type="text" placeholder="Paste your web URL here" id="txtUploadProfileImage" data-bind="value:ProfileImage" class="form-control mbl display-inline">
                                        <a href="#" class="btn btn-m btn-primary input-group-btn" data-bind="click:uploadProfileImage">Upload</a>
                                    </div>
                                </div>
                                <div class="display-inline mtf">
                                    <label class="control-label ">&nbsp;</label>
                                    <div class="mhm">
                                        ([|or|])
                                    </div>
                                </div>
                                <div class="display-inline mtf">
                                    <label class="control-label">[|Choose picture from local drive|]</label>
                                    <input type="file" name="files" id="images" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="pull-left">
                            <a data-dismiss="" aria-hidden="" data-bind="click:function(){ InlineSaving(7)}" class="btn btn-lg btn-primary" id="btnSave"><span>Save</span></a>
                            <a href="javascript:void(0)" onclick="CloseTopInner(this)" data-dismiss="modal" aria-hidden="true" class="btn btn-lg">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="leadSourceModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Lead Source Update Alert!</h4>
                    </div>
                    <div class="modal-body">
                        <div data-bind="visible: ContactID() === 0">
                            <span style=" font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                Please ensure First Lead Source is correct. Any changes after clicking Save will overwrite the original Lead Source value and date and will affect Lead Source reporting.
                            </span>
                        </div>
                        <div data-bind="visible: ContactID() > 0">
                            <span style=" font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                Changes to First Lead Source will overwrite existing Lead Source value and date and will affect Lead Source reporting.
                            </span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" data-dismiss="modal" class="btn btn-lg btn-primary">OK</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
                <div class="modal fade" id="tourmodeltrigger" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">Tour Delete Alert!</h4>
                            </div>
                            <div class="modal-body">
                                <div>
                                    <span style="font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                            Access denied. You do not have permission to delete this Tour.
                                    </span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" id="tourcomptrigger" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">Tour Complete Alert!</h4>
                            </div>
                            <div class="modal-body">
                                <div>
                                    <span style="font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                        Access denied. You do not have permission to complete this Tour.
                                    </span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal fade" id="actioncomptrigger" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">Action Complete Alert!</h4>
                            </div>
                            <div class="modal-body">
                                <div>
                                    <span style="font-size:14px; color:#7b7b7b;font-family:arial,sans-serif;">
                                        Access denied. You do not have permission to complete this Action.
                                    </span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="contactsummarymodal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">Contact Summary</h4>
                            </div>
                            <div class="modal-body">
                                <div id="cont-smy-dtls">
                                    
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                }

<script type="text/javascript">
    window.onunload = function () { localStorage.removeItem("contactdetails"); };
    var contactid = "";
    var dateformat = '@(DateFormat)';
    var currencyformat = '@(CurrencyFormat)';
    var viewModel1 = "";

    Activities = [];
    if ("@Permissions.Where(s => s.Module == AppModules.ContactActions).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Action', ActivityValue: "[|Actions|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.ContactNotes).Select(s => s.HasPermission).SingleOrDefault()" == "True")Activities.push({ ActivityID: 'Note', ActivityValue: "[|Notes|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.ContactTours).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Tour', ActivityValue: "[|Tours|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.Campaigns).Select(s => s.HasPermission).SingleOrDefault()" == "True")Activities.push({ ActivityID: 'Campaign', ActivityValue: "[|Campaigns|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.Forms).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Form', ActivityValue: "[|Forms|]" });
    Activities.push({ ActivityID: 'Contact', ActivityValue: "[|Profile Updates|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.ContactRelationships).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Relationship', ActivityValue: "[|Relationships|]" });
    Activities.push({ ActivityID: 'Attachment', ActivityValue: "[|Attachments|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.SendMail).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Email', ActivityValue: "[|Emails|]" });
    Activities.push({ ActivityID: 'Email Received', ActivityValue: "[|Email Received|]" });

    if ("@Permissions.Where(s => s.Module == AppModules.SendText).Select(s => s.HasPermission).SingleOrDefault()" == "True") Activities.push({ ActivityID: 'Text', ActivityValue: "[|Text|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.LeadAdapter).Select(s => s.HasPermission).SingleOrDefault()" == "True")
        Activities.push({ ActivityID: 'Lead Adapter', ActivityValue: "[|Lead Adapter|]" });

    Activities.push({ ActivityID: 'Lifecycle', ActivityValue: "[|Life Cycle|]" });
    Activities.push({ ActivityID: 'LeadSource', ActivityValue: "[|Lead Source|]" });
    if ("@Permissions.Where(s => s.Module == AppModules.WebAnalytics).Select(s => s.HasPermission).SingleOrDefault()" == "True")
        Activities.push({ ActivityID: 'Web Visit', ActivityValue: "[|Web Visit|]" });


    function createCookie(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
        } else var expires = "";
        document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
    }

    function DisplaywithDateFormat(LastTouchedDate){
        var DateFormat = '@DateFormat';
        var dateFormat =  DateFormat.toUpperCase();
        if (LastTouchedDate == null) {
            return "";
        }
        var returningdate = kendo.toString(kendo.parseDate(LastTouchedDate, 'yyyy/MM/dd'),dateFormat);
        return returningdate;
    }

    createCookie("dateformat",dateformat,1);
    createCookie("currencyformat",currencyformat,1);
    createCookie("log", true, 1);
    $(document).ready(function () {

        var tags = [];
        var PersonDetails = @(Html.Raw(Json.Encode(Model)));
        var BASE_URL = '@Url.Content("~/Contact/")';
        var Communication_Url = '@Url.Content("~/Communication/")';
        var Opportunity_Url = '@Url.Content("~/Opportunities/")';
        var WEBSERVICE_URL = '@HttpContext.Current.Application["webservice_url"]';
        var mailgunPublicKey = '@System.Configuration.ConfigurationManager.AppSettings["mailgun_apikey"]';
        var webVisitString = '@(webVisitModule)';
        var itemsPerPage = '@(ItemsPerPage)';
        $('#325').css({ 'display': 'none' });
        localStorage.removeItem("OpportunityView");
        localStorage.removeItem("OpportunityName");
        localStorage.removeItem("OpportunityID");

        var IsPeople = readCookie("IsPeople");

        if(IsPeople == "2")
            $('#menuItem236').css({ 'display': 'none' });

        MailGunValidater = function (id) {
            var emailValidator = new EmailValidate(id, mailgunPublicKey);
            emailValidator.validate(id);
        }

        var accountId = '@Thread.CurrentPrincipal.Identity.ToAccountID()';
        contactid = PersonDetails.ContactID;
        viewModel1 = new personDetailsViewModel(PersonDetails,BASE_URL,Communication_Url,Activities,Opportunity_Url,WEBSERVICE_URL,itemsPerPage);

        viewModel1.LastContactedString(kendo.toString(kendo.parseDate(viewModel1.LastContactedString()), '@(DateFormat)'))

        ko.applyBindings(viewModel1, document.getElementById("personView"),'@(CurrencyFormat)');

        if(webVisitString == "webvisits")
            viewModel1.getWebVisits();

        var txtContactTitle = $("#txtTitle");

        txtContactTitle.bind('keydown keypress', function() {
            typewatch(function() {
                var authToken = readCookie("accessToken");
                $.ajax({
                    url:  WEBSERVICE_URL + "/Person/Title",
                    type: 'get',
                    dataType: 'json',
                    data:{ 'query': txtContactTitle.val()},
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer " + authToken);
                    },
                    success: function(titleData){
                        var suggestions = [];
                        $.each(titleData.Results, function(index,value){
                            suggestions[index] = value.Text;
                        });


                        var dataSource =null;
                        $("#txtTitle").kendoAutoComplete([]);
                        var autocomplete = $("#txtTitle").data("kendoAutoComplete");
                        dataSource = new kendo.data.DataSource({
                            data:suggestions
                        });

                        autocomplete.setDataSource(dataSource);
                    },
                    error: function (response) {                                                        
                        notifyError(response.responseText);            
                    }
                });
            }, 500);
        });

        $(':checkbox').on('change', function() {
            $(this).triggerHandler('click');
        });

        var contactIndex = @(Session["contactindex"]);
        var totalHits = @(Session["TotalHits"]);
        viewModel1.ContactIndex(contactIndex);
        viewModel1.TotalHits(totalHits);
        var primaryEmail;
        $.each(viewModel1.Emails(), function (index, Email) {
            if(Email.IsPrimary()==true)
            {
                primaryEmail=Email;
            }
        });
        var primaryPhone;
        $.each(viewModel1.Phones(), function (index, Phone) {
            if(Phone.IsPrimary()==true)
            {
                primaryPhone=Phone;
            }
        });

        var value = viewModel1.ContactID() + "|" + viewModel1.Name() + "|" + viewModel1.CompanyName();

        if(primaryEmail!=null)
        {
            var value = viewModel1.ContactID() + "|" + viewModel1.Name() + "|" + viewModel1.CompanyName()+"|"+primaryEmail.EmailID()+"|"+primaryEmail.EmailId()+"|"+viewModel1.DoNotEmail() +"|" + primaryEmail.EmailStatusValue() ;
        }
        if(primaryPhone!=null&&primaryEmail!=null)
            var value = viewModel1.ContactID() + "|" + viewModel1.Name() + "|" + viewModel1.CompanyName()+"|"+primaryEmail.EmailID()+"|"
                +primaryEmail.EmailId()+"|"+viewModel1.DoNotEmail()+ "|" + primaryEmail.EmailStatusValue() + "|"+primaryPhone.ContactPhoneNumberID()+"|"+primaryPhone.Number()+"|"+primaryPhone.PhoneTypeName();
        if(primaryEmail==null&&primaryPhone!=null)
            var value = viewModel1.ContactID() + "|" + viewModel1.Name() + "|" + viewModel1.CompanyName()+"|"+null+"|"
               +null+"|"+"false"+"|"+null+ "|"+primaryPhone.ContactPhoneNumberID()+"|"+primaryPhone.Number()+"|"+primaryPhone.PhoneTypeName();


        localStorage.setItem("contactdetails", value);

        selfDetails.contactdetails(value);

        function onSelect(e) {
            $('.k-file').hide();
            var varImageType="";
            $.each(e.files, function (index, value) {
                var ok = value.extension.toLowerCase() == ".jpg"
                         || value.extension.toLowerCase() == ".jpeg"
                         || value.extension.toLowerCase() == ".png"
                         || value.extension.toLowerCase() == ".bmp";

                if (!ok) {
                    e.preventDefault();
                    notifyError("Please upload jpg, jpeg, png, bmp files"); return false;
                }
                else if(bytesToSize(e.files[0].size)>3) {
                    e.preventDefault();
                    notifyError("Image size should not be more than 3 MB");
                    return false;
                }
                else {
                    $("#txtUploadProfileImage").val('');
                    viewModel1.ContactImageUrl='';
                }

                var fileReader = new FileReader();
                fileReader.onload = function (event) {
                    //  self.imagePath(event.target.result);
                    var image = document.getElementById("contactimage");
                    image.src = event.target.result;
                    viewModel1.Image().ImageContent=event.target.result;
                }
                fileReader.readAsDataURL(e.files[0].rawFile);
                viewModel1.Image().ImageType= value.extension.toLowerCase();
                viewModel1.Image().OriginalName= e.files[0].name;
            });
        }
        function onComplete(e) {
            $('.k-filename').hide();
        }
        function onProgress(e) { getFileInfo(e);$('.k-file').hide();}
        function getFileInfo(e) {

            return $.map(e.files, function (file) {
                var info = file.name;

                var varFullPath = file.rawFile.mozFullPath;
                // File size is not available in all browsers
                if (file.size > 0) {
                    info += " (" + Math.ceil(file.size / 1024) + " KB)";
                }
                return info;
            }).join(", ");
        }
        function onUpload(e) {
            $('.k-filename').hide();
        }
        function bytesToSize(bytes) {
            return (bytes/(1024*1024)).toFixed(2);
        }


        $('#txtContactTags').tagsInput({
            width:'auto',
            onAddTag: function (value,uid) {

                var tag = $(viewModel1.TagsList()).filter(function (index, tagItem) {
                    if((typeof tagItem.LeadScoreTag == 'function' ? tagItem.LeadScoreTag():tagItem.LeadScoreTag) == true){
                        return ((typeof tagItem.TagName == 'function'?tagItem.TagName():tagItem.TagName).toString().toLowerCase().replace("*","")) == (value.toString().toLowerCase().replace(" *",""));
                    }
                    else{
                        return (typeof tagItem.TagName == 'function'?tagItem.TagName():tagItem.TagName).toString().toLowerCase() == value.toString().toLowerCase();
                    }
                })[0];

                if(tag == undefined){
                    $.ajax({
                        url: BASE_URL + 'AddTag',
                        type: 'post',
                        dataType: 'json',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ 'tagName': value, 'contactId': viewModel1.ContactID() ,'tagId':uid})
                    }).then(function (response) {  
                        var filter = $.Deferred()            
                        if (response.success) {                
                            filter.resolve(response)            
                        } else {                
                            filter.reject(response.error)            
                        }            
                        return filter.promise()        
                    }).done(function (data) {
                        if (data.success === false)
                        {
                            notifyError(data.response);  
                        }
                        viewModel1.TagsList.push(data.response);  //() after TagsList
                    }).fail(function (error) {                                 
                        notifyError(error);        
                    });
                }
            },
            onRemoveTag: function (value) {

                var tag = $(viewModel1.TagsList()).filter(function (index, tagItem) {
                    if((typeof tagItem.LeadScoreTag == 'function' ? tagItem.LeadScoreTag():tagItem.LeadScoreTag) == true){
                        return ((typeof tagItem.TagName == 'function'?tagItem.TagName():tagItem.TagName).toString().toLowerCase().replace("*","")) == (value.toString().toLowerCase().replace(" *",""));
                    }
                    else{
                        return (typeof tagItem.TagName == 'function'?tagItem.TagName():tagItem.TagName).toString().toLowerCase() == value.toString().toLowerCase();
                    }
                })[0];

                var result = RemoveTagFunction(value,(typeof tag.Id == 'function'?tag.Id():tag.Id),viewModel1.ContactID());

                viewModel1.TagsList.remove(function (tag) {
                    return (typeof tag.TagName == 'function' ? tag.TagName() : tag.TagName) === value;
                });


                if(result == true){

                    if (viewModel1.hasOwnProperty('PopularTags') && viewModel1.PopularTags() != null) {
                        var popularTagfilter = ko.utils.arrayFilter(viewModel1.PopularTags(), function (Tag, index) {
                            if ( (typeof Tag.TagName == 'function' ? Tag.TagName() : Tag.TagName) === value) {
                                Tag.IsSelected = false;
                                $('#populartag' + (index + 1)).parent('.checked').removeClass('checked');
                            }
                            return (typeof Tag.TagName == 'function' ? Tag.TagName() : Tag.TagName) === value;
                        });

                        var recentTagfilter = ko.utils.arrayFilter(viewModel1.RecentTags(), function (Tag, index) {
                            if ((typeof Tag.TagName == 'function' ? Tag.TagName() : Tag.TagName) === value) {
                                Tag.IsSelected = false;
                                $('#recenttag' + (index + 1)).parent('.checked').removeClass('checked');
                            }
                            return (typeof Tag.TagName == 'function' ? Tag.TagName() : Tag.TagName) === value;
                        });
                    }
                    viewModel1.TagsList.remove(function (tag) {
                        return (typeof tag.TagName == 'function' ? tag.TagName() : tag.TagName) === value;
                    });

                }

            },
        });


        if (viewModel1.TagsList() != null) {
            $.each(viewModel1.TagsList(), function (index, tagItem) {
                var tagname = tagItem.LeadScoreTag() == true? tagItem.TagName()+" *":tagItem.TagName();
                $("#txtContactTags").addTag(tagname,{ UID: tagItem.Id() });
            });
        }


        function RemoveTagFunction(value,uid,contactid){
            $.ajax({
                url: BASE_URL + 'RemoveTag',
                type: 'post',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ 'tagName': value,'tagid':uid == undefined?0:uid, 'contactId': viewModel1.ContactID() })
            }).then(function (response) {            
                var filter = $.Deferred()            
                if (response.success) {                
                    filter.resolve(response)            
                } else {                
                    filter.reject(response.error)            
                }           
                return filter.promise()        
            }).done(function (data) {
                if (data.success === false)
                {
                    notifyError(data.response);
                }     

            }).fail(function (error) {                                
                // notifyError(error);        
            });
            return true;
        }


        var typewatch = (function(){
            var timer = 0;
            return function(callback, ms){
                clearTimeout (timer);
                timer = setTimeout(callback, ms);
            }
        })();

        $("#txtContactTags_tag").kendoAutoComplete({
            minLength: 1,
            placeholder: "Type a tag name",
            dataTextField: "TagName",
            select: autocomplete_select
        });
        //$("#txtContactTags_tag").kendoAutoComplete([]);

        var tagNames = $("#txtContactTags_tag");
        tagNames.bind('keydown keypress', function() {
            typewatch(function() {
                if (tagNames.val() === null || tagNames.val() === "")
                    return;
                var authToken = readCookie("accessToken");
                $.ajax({
                    url:  WEBSERVICE_URL + "/Tag/Names",
                    type: 'get',
                    dataType: 'json',
                    data:{ 'query': tagNames.val(),'accountId': accountId},
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer " + authToken);
                    },
                    success: function(tagsData){
                        if (tagsData.Tags.length > 0) {
                            tags = tagsData.Tags;
                        }
                        var autocomplete = $("#txtContactTags_tag").data("kendoAutoComplete");
                        autocomplete.dataSource.data(tagsData.Tags);
                    },
                    error: function (response) { 
                        notifyError(response.responseText);            
                    }
                });
            }, 500);
        });

        function autocomplete_select(e) {
            var item = e.item;
            var dataItem = this.dataItem(e.item);
            var text = item.text();

            var tagviewmodel = $(tagsViewModel).filter(function () {
                return this.TagId.toString().toLowerCase() === dataItem.TagID.toString().toLowerCase();
            })[0];

            var tag = $(viewModel1.TagsList()).filter(function (index, tagItem) {
                if((typeof tagItem.LeadScoreTag == 'function' ? tagItem.LeadScoreTag():tagItem.LeadScoreTag) == true){
                    return ((typeof tagItem.TagName == 'function'?tagItem.TagName():tagItem.TagName).toString().toLowerCase().replace("*","")) == (value.toString().toLowerCase().replace(" *",""));
                }
                else{
                    return (typeof tagItem.Id == 'function'?tagItem.Id():tagItem.Id) == dataItem.TagID;
                }
            })[0];

            if (!$("#txtContactTags").tagExist(text)&& tagviewmodel == undefined && tag == undefined) {
                $("#txtContactTags").addTag(text,{ UID: dataItem.TagID });
            }
            e.preventDefault();
        }

        var recentJs = new RecentPopular(viewModel1,"txtContactTags");


    });

    function copyContact() {
        window.location.href = "/copyperson?contactId=" + contactid + "&contactType=" +1;
    }

    function AddOpportunity(){
        var Opportunity_BASE_URL = '@Url.Content("~/Opportunities/")';
        var array = [];
        array.push(contactid);
        //window.location.href = Opportunity_BASE_URL + "AddOpportunityWithBuyers?ContactIDs=" + array.join();
        $.ajax({
            url: Opportunity_BASE_URL + 'StoreContacts',
            type: 'post',
            data: { 'ContactIDs': array.join() },
            dataType: 'json',
            success: function (response) {
                removepageloader();
                window.location.href = Opportunity_BASE_URL + "AddOpportunityWithBuyers?referencekey=" + response.stringKey;
            },
            error: function (response) {
                var error = jQuery.parseJSON(response.responseText);
                removepageloader();
                notifyError(error.Exception.Message);
            }
        });
    }

    function deleteContacts()
    {
        alertifyReset("Delete Contact", "Cancel");
        // alertify.confirm("Are you sure you want to delete this contact?", function (e) {

        alertify.confirm("[|You’re about to delete 1 Contact and their history. Are you sure you want to delete 1 Contact|]?" ,function (e) {

            if (e) {
                varDeleteURL = "/Contact/DeleteContact?id=" + contactid;
                jQuery.support.cors = true;
                $.ajax({
                    url: varDeleteURL,
                    type: 'post',
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8"
                }).then(function (response) {            
                    var filter = $.Deferred()            
                    if (response.success) {                
                        filter.resolve(response)            
                    } else {                
                        filter.reject(response.error)            
                    }            
                    return filter.promise()        
                }).done(function (data) {
                    notifySuccess("[|Successfully deleted the Contact|]");
                    setTimeout(
                        function()
                        {
                            createCookie('log', false, 1);
                            window.location.href = "/contacts"
                        },setTimeOutTimer);   
                }).fail(function (error) {                                
                    notifyError(error);        
                });
                //    success: function (data) {
                //        if (data.success === true) {
                //            notifySuccess("[|Successfully deleted the Contact|]");
                //            setTimeout(
                //                function()
                //                {
                //                    window.location.href = "/contacts"
                //                },5000);
                //        }
                //        else if(data.success == false){
                //            notifyError(data.response);
                //        }
                //    },
                //    error: function (x, y, z) {
                //    }
                //});

            }
            else {
                notifyError("[|You've clicked Cancel|] ");
            }
        });

    }

    var SyncContact = function(){
        var BASE_CONTACT_URL = '@Url.Content("~/Contact/")';
        pageLoader();
        $.ajax({
            url: BASE_CONTACT_URL + 'UpdateSocialProfiles',
            type: 'get',
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
            data : { 'contactId' : contactid, 'contactType' : 1}
        }).then(function (response) {            
            var filter = $.Deferred()            
            if (response.success) {                
                filter.resolve(response)            
            } else {                
                filter.reject(response.error)            
            }            
            return filter.promise()        
        }).done(function (data) {
            notifySuccess("[|Successfully updated the Contact|]");
            setTimeout(function () {
                window.location.reload();
            }, setTimeOutTimer);
        }).fail(function (error) {                                
            notifyError(error);        
        })
    }

    function ViewContactSummary(e) {
        var details =  $(e).attr("data-content");
        document.getElementById('cont-smy-dtls').innerText = details
       // $('#contactsummarymodal').modal('toggle');
    }

    function DeleteContactNote(noteID) {
        var url = '@Url.Content("~/Contact/")';
        var note = "GetNoteContactsCount";
        $.ajax({
            url: url + note,
            type: 'post',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ 'noteId': noteID })
        }).then(function (response) {
            var filter = $.Deferred()
            if (response.success) {
                filter.resolve(response)
            } else {
                filter.reject(response.error)
            }
            return filter.promise()
        }).done(function (data) {
            if (data.response.Count == 1 || data.response.SelectAll == true) {
                DeleteNoteConfirm("Delete Note", "Cancel", "[|Are you sure you want to delete this Note|]?", noteID);
            }
            else {
                DeleteNoteConfirm("Delete Note", "Cancel", "[|Note added to more than one Contact. Deleting this Note will remove it from all associated Contacts. Are you sure you want to delete?|]", noteID);
            }
        }).fail(function (error) {
            notifyError(error);
        })

    }

    function DeleteNoteConfirm(okText, cancelText, confirmMessage, noteId) {
        alertifyReset(okText, cancelText);
        alertify.confirm(confirmMessage, function (e) {

            if (e) {
                var url = '@Url.Content("~/Contact/")';
                var actionUrl = url + "DeleteNote";
                $.ajax({
                    url: actionUrl,
                    type: 'post',
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ 'noteId': noteId, 'contactId': 0 })
                }).then(function (response) {
                    var filter = $.Deferred()
                    if (response.success) {
                        filter.resolve(response)
                    } else {
                        filter.reject(response.error)
                    }
                    return filter.promise()
                }).done(function (data) {
                    $('.success-msg').remove();
                    notifySuccess('[|Successfully deleted Note|]');
                    setTimeout(
                        function () {
                            window.location.href = document.URL;
                        }, setTimeOutTimer);
                }).fail(function (error) {
                    notifyError(error);
                })
            }
            else {
                notifyError("[|You've clicked Cancel|]");
            }
        });
    }

</script>
