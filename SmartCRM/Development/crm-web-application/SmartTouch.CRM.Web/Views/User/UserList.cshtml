@model SmartTouch.CRM.ApplicationServices.ViewModels.UserViewModel
@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var Details = ViewBag.userId;
    short ItemsPerPage = ViewBag.ItemsPerPage;
    bool IsLimitExceeded = (bool)ViewBag.IsLimitExceeded;
}

@Scripts.Render("~/bundles/usergrid")
@Scripts.Render("~/bundles/uservm")

@if (IsLimitExceeded)
{
<div class="alert alert-warning">
        <i class="icon st-icon-spam"></i>
        [|Maximum number of Users reached. Please contact Help Desk for assistance at helpdesk@smarttouchinteractive.com.|]
    </div>
}
@using (Ajax.BeginForm("UserList", null, new AjaxOptions { UpdateTargetId = "content-area", OnSuccess = "OnSuccess", OnFailure = "OnFailure" }, new { @id = "file_upload" }))
{
    <div id="UserList">
        <div class="page-title">[|Users|]</div>
        <div class="users-grid">
            @(Html.Kendo().Grid<SmartTouch.CRM.ApplicationServices.ViewModels.UserViewModel>()
    .Name("grid")
    .HtmlAttributes(new { @class = "k-grid-content" })
    .AutoBind(false)
    .Pageable(pageable => pageable
            .Refresh(false)
            .PageSizes(true)
        .ButtonCount(10).Messages(m => m
            .Display("[|Showing|] {0}-{1} [|from|] {2:n0} [|User(s)|]")
        .Empty("[|No users to display|]").ItemsPerPage("[|Users per page|]")))
    .Columns(columns =>
    {
        columns.Template(e => "").Title("").HeaderHtmlAttributes(new { @style = "width:60px;" });
        columns.Template(e => "").Title("[|Username|]").HeaderHtmlAttributes(new { @class = "col-30" });
        columns.Template(e => "").Title("[|Email|]").HeaderHtmlAttributes(new { @class = "col-30" });
        columns.Template(e => "").Title("[|Role|]").HeaderHtmlAttributes(new { });
        columns.Template(e => "").Title("[|Status|]").HeaderHtmlAttributes(new { });
        columns.Template(e => "").Title("").HeaderHtmlAttributes(new { @style = "width:80px;" });
    })
    .ToolBar(toolbar =>
    {
    toolbar.Template(@<text>
                <div class="toolbar grid-ct-header">
                    <div class="left-part">
                        <label class="checkbox toggle-all" for="masterCheckBox">
                            <input type='checkbox' data-toggle='checkbox' id='masterCheckBox' />
                            [|Select All|]
                        </label>
                    </div>

                    <div class="right-part">
                        <div class="grid-search">
                            <input type="search" id="txtSearch" onkeydown="GetUsersBasedonsearch(this);" class=" form-control" placeholder="[|Search|]" />
                            <i class="icon st-icon-search-2"></i>
                        </div>
                        <div class="grid-controls">
                            <span class="sort-label">[|Showing|]</span>
                            <span class="sort-select" id="userTypes">
                                @(Html.Kendo().DropDownList()
                                    .Name("userTypes")
                                    .DataTextField("RoleName")
                                    .DataValueField("Id")
                                    .OptionLabel("[|All|]")
                                    .Events(e => e.Change("userTypeChange"))
                            //.DataSource(source =>
                            //{
                            //    source.Read(read =>
                            //        {
                            //            //read.Action("GetRoles", "User");
                            //            read.Data("getRoles");
                            //        });
                            //})
                                )
                            </span>
                        </div>
                    </div>
                </div>
    </text>);
    })
                            .ClientRowTemplate(
                            @"<tr class='odd'>
                            <td class='grid-checkbox'><label class='checkbox'><input type='checkbox' class='chkuser' data-roleid='#:RoleID#' data-name='#:Name#'" +
                                    " id='#: UserID #' data-status='#: Status #' data-toggle='checkbox'></label></td>" +
                            "<td> "
                            + Html.ActionLink("#:Name#", "AddEditUser", new { userId = "uid" }, null).ToHtmlString().Replace("uid", "#:UserID#") + "</td>" +
                                        @"<td>#if (PrimaryEmail != null ) {#<label> #:PrimaryEmail#</label> #}#</td>
                            <td>#:RoleName#</td>
                            <td>#if (Status==1) {# <span class='at-active bold'>Active</span> #}else {# <span class='at-inactive bold'>Inactive</span> #}#</td>
                            <td class='grid-row-controls'><span>" + Html.ActionLink("<i class='icon st-icon-edit'></i>", "AddEditUser", new { userId = "uid" }, new { @title = "Edit User" }).ToHtmlString().Replace("uid", "#:UserID#") + "<a href='javascript:void(0)' onclick='DeleteUser(#:UserID#)' title='Delete User'><i class='icon st-icon-bin-3'></i></a></span></td></tr>")

                            .ClientAltRowTemplate(
                            @"<tr class='odd'><td class='grid-checkbox'><label class='checkbox'><input type='checkbox' class='chkuser' data-roleid='#:RoleID#' data-name='#:Name#' id='#: UserID #'" +
                            " data-status='#: Status #' data-toggle='checkbox'></label></td>" +
                            "<td> " + Html.ActionLink("#:Name#", "AddEditUser", new { userId = "uid" }, null).ToHtmlString().Replace("uid", "#:UserID#") + "</td>" +
                                            @"<td>#if (PrimaryEmail != null ) {#<label> #:PrimaryEmail#</label> #}#</td>
                            <td>#:RoleName#</td>
                            <td>#if (Status==1) {# <span class='at-active bold'>Active</span> #}else {# <span class='at-inactive bold'>Inactive</span> #}#</td>

                            <td class='grid-row-controls'><span>" + Html.ActionLink("<i class='icon st-icon-edit'></i>", "AddEditUser", new { userId = "uid" }, new { @title = "Edit User" }).ToHtmlString().Replace("uid", "#:UserID#") + "<a href='javascript:void(0)' onclick='DeleteUser(#:UserID#)' title='Delete User'><i class='icon st-icon-bin-3'></i></a></span></td></tr>")

                                    .Events(events => events.DataBinding("onDataBinding").DataBound("onDataBound"))
                                    .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(ItemsPerPage)
                                    .Read(read => read.Action("UsersViewRead", "User").Data("additionalInfo"))
                                    )
            )
        </div>
    </div>
}
@section Scripts{
    <script>
        var searchText;
        function createCookie(name, value, days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                var expires = "; expires=" + date.toGMTString();
            } else var expires = "";
            document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
        }

        var contactDtls = '@(Details)';
        if (contactDtls == 0) {
            localStorage.removeItem("usersearchtext");
            localStorage.removeItem("usersearchcontent");
            localStorage.removeItem("userrolesearchcontent");
            createCookie("userpagenumber", 1, 2); createCookie("userpagesize", '@(ItemsPerPage)', 1);
        }
        function additionalInfo() {
            return {
                name: localStorage.getItem("usersearchtext"),
                status: localStorage.getItem("usersearchcontent"),
                role: localStorage.getItem("userrolesearchcontent")
            }
        }
    </script>

    <script>
        function userTypeChange() {
            //$("#txtSearch").val('');
            var value = this.value();

            //if (value =="0" || value == "1" || value == "2")
            //{
            //    localStorage.removeItem("userrolesearchcontent");
            //    localStorage.removeItem("usersearchcontent");
            //    localStorage.setItem("usersearchcontent", value);
            //    //$("#grid").data("kendoGrid").dataSource.read();
            //    var grid = $("#grid").data("kendoGrid");
            //}
            //else
            //{
            localStorage.removeItem("usersearchcontent");
            localStorage.removeItem("userrolesearchcontent");
            localStorage.setItem("userrolesearchcontent", value);
            var grid = $("#grid").data("kendoGrid");
            // }
            var psize = readCookie("userpagesize");
            grid.dataSource.query({ page: 1, pageSize: psize });
            appendCheckbox();
        }

        function getRoles(){
            var roles = null;
            $.ajax({
                url: 'User/GetRoles',
                type: 'get',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
            }).then(function (response) {
                var filter = $.Deferred();
                if (response.success) {
                    filter.resolve(response);
                }
                else {
                    filter.reject(response.error);
                }
                return filter.promise();
            }).done(function (data) {
                roles = data.response;
            }).fail(function (error) {
                notifyError(error);
            });
            setTimeout(function(){
                $("#userTypes").data("kendoDropDownList").dataSource.data(roles);
            }, 1000);
        };

        function GetUsersBasedonsearch(e) {
            setTimeout(function () {
                var enterKeyPressCode = 13;
                if (searchText !== $("#txtSearch").val() || (searchText === $("#txtSearch").val() && e.keyCode == enterKeyPressCode))
                    searchText = $("#txtSearch").val();
                else
                    return;

                $filter = new Array();
                var grid = $("#grid").data("kendoGrid"), searchBox = $("#txtSearch").val(), userType = $("#userTypes").val();
                localStorage.removeItem("usersearchtext");
                if ($.trim(searchBox).length > 2) {
                    localStorage.removeItem("usersearchtext");
                    localStorage.setItem("usersearchtext", searchBox);
                    var psize = readCookie("userpagesize");
                    grid.dataSource.query({ page: 1, pageSize: psize });
                    createCookie("userpagenumber", 1, 1);
                    //localStorage.setItem("usersearchtext", searchBox);
                    //// $("#grid").data("kendoGrid").dataSource.read();

                    //grid.dataSource.query({ page: 1, pageSize: psize });
                    appendCheckbox();
                }
                else if ($.trim(searchBox).length === 0) {
                    localStorage.removeItem("usersearchtext");
                    $("#grid").data("kendoGrid").dataSource.read();
                    appendCheckbox();
                }
            }, 1000);
        }

        function onDataBinding(arg) {
            setTimeout(function () {
                appendCheckbox();
                bindCheckboxchnage('chkuser');
            }, 200)
        }

        function onDataBound(e) {
            var colCount = $(".k-grid").find('table colgroup > col').length;
            var dataSource = new kendo.data.DataSource({
                data: ToPageDropdown()
            });
            $("select[data-role='dropdownlist']").data('kendoDropDownList').setDataSource(dataSource);
            if (e.sender.dataSource.view().length == 0) {
                e.sender.table.find('tbody').append('<tr><td colspan="' + colCount +'"><div class="notecordsfound"><div><i class="icon st-icon-browser-windows-2"></i></div><span class="bolder smaller-90">[|No records found|]</span></div></td></tr>')
            }
        }

        function editUser()
        {
            checkedvalues = fnGetChkvalGrid('chkuser');
            if (checkedvalues != "") {
                if (checkedvalues.length == 1) {
                    window.location.href = "../edituser?userId=" + checkedvalues;
                }
                else {
                    notifyError("[|Please select only one user|]");
                }
            }
            else {
                notifyError("[|Please select only one user|]");
            }
        }

        function DeleteUser(id)
        {
            alertifyReset("Delete User","Cancel");
            var array = [];
            array.push(id);
            var confirmMesaage = "[|Are you sure you want to delete this User|]?";
            commondelete(confirmMesaage,array);
        }


        function DeleteUsers()
        {
            alertifyReset("Delete User","Cancel");
            var selectedUsers = fnGetSelectedUsers('chkuser');
            var array = [];
            $.each(selectedUsers, function( index, value ) {
                array.push(value.Id);
            });

            var confirmMessage = "";
            if(array.length == 1){
                confirmMessage = "[|Are you sure you want to delete this User|]?"
                commondelete(confirmMessage,array);
            }else if(array.length > 1){
                confirmMessage = "[|Are you sure you want to delete|]" + "&nbsp;" + array.length + " [|Users|]?"
                commondelete(confirmMessage,array);
            }else{
                notifyError("[|Please select at least one user|]");
            }
        }


        function commondelete(confirmationMessage,userIds){
            console.log(typeof(userIds),userIds);
            alertify.confirm(confirmationMessage, function (e) {
                if (e)
                {
                    var BASE_URL = '@Url.Content("~/User/")';
                    varDeleteURL = BASE_URL+ "DeleteUsers";
                    jQuery.ajaxSettings.traditional = true
                    $.ajax({
                        url: varDeleteURL,
                        type: 'POST',
                        dataType: 'json',
                        data: JSON.stringify({Id: userIds}),
                        contentType: 'application/json; charset=utf-8',
                    }).then(function (response) {            
                        var filter = $.Deferred();
                        if (response.success) {
                            filter.resolve(response);
                        } 
                        else {     
                            filter.reject(response.error);
                        }
                        return filter.promise();
                    }).done(function (data) {
                        notifySuccess('[|Successfully deleted the User|]');
                        $("#grid").data("kendoGrid").dataSource.read();
                        setTimeout(
                            function (){
                                window.location.href = "users"
                            },setTimeOutTimer)
                    }).fail(function (error) {
                        notifyError(error);
                    });;
                }
                else
                {
                    notifyError("[|You've clicked Cancel|]");
                }
            });
        }

        $(function () {

            removepageloader();
            getRoles();
            var dropdownlisttype = $("#userTypes").data("kendoDropDownList");

            //if (dropdownlisttype.value() == 0 || dropdownlisttype.value() == 1 || dropdownlisttype.value() == 2){
            //    console.log("dropdownlisttype");
            //    console.log(dropdownlisttype.value());
            //    dropdownlisttype.value(localStorage.getItem("usersearchcontent"));
            //}
            //else if (dropdownlisttype.value() == 3 || dropdownlisttype.value() == 4 || dropdownlisttype.value() == 5 || dropdownlisttype.value() == 6){
            dropdownlisttype.value(localStorage.getItem("userrolesearchcontent"))
            //}
            var limitExceeded = '@(IsLimitExceeded)';
            //if (limitExceeded == "True")
            //    notifyError("Maximum number of Users reached. Please contact Help Desk for assistance at helpdesk@smarttouchinteractive.com.");
            var BASE_URL = '@Url.Content("~/User/")';
            var userview = @(Html.Raw(Json.Encode(Model)));
            var userviewModel = new userlistViewModel(userview, BASE_URL);
            ko.applyBindings(userviewModel,document.getElementById("UserList"));

            $("#txtSearch").val(localStorage.getItem("usersearchtext"));
            var grid = $('#grid').data('kendoGrid');
            var pno = readCookie("userpagenumber");
            var psize = readCookie("userpagesize");
            grid.dataSource.query({ page: pno, pageSize: psize });

            tableMasterCheckBox('users-grid');
        });

    </script>

}
