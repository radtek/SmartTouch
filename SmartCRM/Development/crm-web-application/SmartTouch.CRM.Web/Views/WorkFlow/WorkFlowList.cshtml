Vensai Testing
@model SmartTouch.CRM.ApplicationServices.ViewModels.WorkFlowViewModel
@{
    short ItemsPerPage = ViewBag.ItemsPerPage;
}

@Scripts.Render("~/bundles/automationlistvm")
<div id="UserList">
    <div class="page-title">[|Workflows|]</div>
    <div class="workflows-grid">
        @(Html.Kendo().Grid<SmartTouch.CRM.ApplicationServices.ViewModels.WorkFlowViewModel>()
    .Name("grid")
    .HtmlAttributes(new { @class = "k-grid-content" })
    .AutoBind(false)
    .Pageable(pageable => pageable
            .Refresh(false)
            .PageSizes(true)
        .ButtonCount(10).Messages(m => m
                                                    .Display("[|Showing|] {0}-{1} [|from|] {2:n0} [|Workflow(s)|]")
                                .Empty("[|No workflows to display|]").ItemsPerPage("[|Workflows per page|]")))
    .Columns(columns =>
    {
        columns.Template(e => "").Title("").HeaderHtmlAttributes(new { @style = "width:60px;" });
        columns.Bound(e =>e.WorkflowName).Title("[|Workflow Name|]").Sortable(true).HeaderHtmlAttributes(new { @class = "col-25" });
        columns.Bound(e =>e.Status).Title("[|Status|]").Sortable(true).HeaderHtmlAttributes(new { @class = "col-15" });
        columns.Bound(e => e.ContactsStarted).Title("[|Contacts Started|]").Sortable(true).HeaderHtmlAttributes(new { @class = "text-center" });
        columns.Bound(e => e.ContactsInProgress).Title("[|In Progress|]").Sortable(true).HeaderHtmlAttributes(new { @class = "text-center" });
        columns.Bound(e =>e.ContactsFinished).Title("[|Completed|]").Sortable(true).HeaderHtmlAttributes(new { @class = "text-center" });
        columns.Bound(e => e.ContactsOptedOut).Title("[|Opted Out|]").Sortable(true).HeaderHtmlAttributes(new { @class = "text-center" });
        columns.Template(e => "").Title("").HeaderHtmlAttributes(new { @style = "width:100px;" });
    })
    .Sortable(sortabe => sortabe.AllowUnsort(true))
    .Resizable(resize => resize.Columns(true))
    .ToolBar(toolbar =>
    {
        toolbar.Template(@<text>
            <div class="toolbar grid-ct-header">
                <div class="left-part">
                    <label class="checkbox toggle-all" for="masterCheckBox">
                        <input type='checkbox' data-toggle='checkbox' id='masterCheckBox' />
                    </label> [|Select All|] 
                </div>

                <div class="right-part">
                    <div class="grid-search">
                        <input type="search" id="txtSearch" onkeydown="GetWorkflowsBasedonsearch(this)" class=" form-control" placeholder="[|Search|]" />
                        <i class="icon st-icon-search-2"></i>
                    </div>
                    <div class="grid-controls">
                        <span class="sort-label">Showing</span>
                        <span class="sort-select">
                            @(Html.Kendo().DropDownList()
                                    .Name("WorkFlowStatus")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Events(e => e.Change("WorkFlowStatusChange"))
                                    .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                            Text = "[|All Workflows|]",
                                            Value = ""
                                        },
                                        new SelectListItem() {
                                            Text = "[|Active Workflows|]",
                                            Value = "401"
                                        },
                                        new SelectListItem() {
                                            Text = "[|Draft Workflows|]",
                                            Value = "402"
                                        },
                                        new SelectListItem() {
                                            Text = "[|Paused Workflows|]",
                                            Value = "403"
                                        },
                                         new SelectListItem() {
                                            Text = "[|Inactive Workflows|]",
                                            Value = "404"
                                        }
                                })
                            )
                        </span>
                    </div>
                </div>
            </div>
        </text>);
    })
                                                                                                                                        .ClientRowTemplate(
                                                                                                                                                                                                                                                                                                                                                                                                    @"<tr class='odd'>
            <td class='grid-checkbox'>
                <label class='checkbox'>
                    <input type='checkbox' class='chkworkflow' id='#: WorkflowID #' status='#:StatusID#' data-toggle='checkbox' />
                </label>
            </td>
            <td>
                <span class=''>
                     #if (StatusID==WorkflowTypes.Draft)
                        {#
                            <a href='/editworkflow?workflowid=#: WorkflowID #' class='tooltiptoggle' title='#:WorkflowName#'>#:WorkflowName#</a>
                        #}
                    else
                        {#
                            <a href='/workflowreport?workflowid=#: WorkflowID #' class='tooltiptoggle' title='#:WorkflowName#'>#:WorkflowName#</a>
                        #}#
                </span>
            </td>
            <td>
                #if (StatusID==WorkflowTypes.Active)
                    {#
                        <span class='at-active bold'>[|Active|]</span>
                    #}
                else if(StatusID==WorkflowTypes.Draft)
                    {#
                        <span class='at-draft bold'>[|Draft|]</span>
                    #}
                else if(StatusID==WorkflowTypes.Paused)
                    {#
                        <span class='at-paused bold'>[|Paused|]</span>
                    #}
                else if(StatusID==WorkflowTypes.InActive)
                    {#
                        <span class='at-inactive bold'>[|InActive|]</span>
                    #}#

            </td>
            <td class='text-center'>
                <span class=''>
                    #if(ContactsStarted == 0)
                        {#
                            0
                        #}
                    else
                    {#
                        <a href='workflowcontacts?WorkflowID=#:WorkflowID#&WorkflowContactState=#:WorkflowContactStage.ContactsStarted#'>
                            #: ContactsStarted #
                        </a>
                    #}#
                </span>
            </td>
            <td class='text-center'>
                <span class=''>
                     #if(ContactsInProgress == 0)
                        {#
                            0
                        #}
                        else
                        {#
                            <a href='workflowcontacts?WorkflowID=#:WorkflowID#&WorkflowContactState=#:WorkflowContactStage.ContactsInProgress#'>
                                 #: ContactsInProgress #
                            </a>
                        #}#
                </span>
            </td>
            <td class='text-center'>
                <span class=''>
                    #if(ContactsFinished == 0)
                    {#
                        0
                    #}
                    else
                    {#
                        <a href='workflowcontacts?WorkflowID=#:WorkflowID#&WorkflowContactState=#:WorkflowContactStage.ContactsCompleted#'>
                            #: ContactsFinished #
                        </a>
                    #}#
                </span>
            </td>
            <td class='text-center'>
                <span class=''>
                    #if(ContactsOptedOut == 0)
                        {#
                            0
                        #}
                    else
                        {#
                             <a href='workflowcontacts?WorkflowID=#:WorkflowID#&WorkflowContactState=#:WorkflowContactStage.ContactsOptedOut#'>
                                #: ContactsOptedOut #
                            </a>
                        #}#
                </span>
            </td>
            <td class='grid-row-controls'>
                <span>
                         #if (StatusID==WorkflowTypes.Draft)
                        {#
                             <a href='editworkflow?WorkflowID=#:WorkflowID#' title='Edit Workflow'><i class='icon st-icon-edit'></i></a>
                             <a href='javascript:void(0)' onclick='DeleteWorkFlow(#:WorkflowID#)' title='Delete Workflow'><i class='icon st-icon-bin-3'></i></a>
                             #if (ParentWorkflowID != 0)
                                {#
                                      <a href='workflowreport?workflowid=#:ParentWorkflowID#' title='View Workflow History'><i class='icon st-icon-clock'></i></a>
                                #}#
                        #}#
                        #if (StatusID==WorkflowTypes.Active ||StatusID==WorkflowTypes.Paused)
                        {#
                            <a href='/fulleditworkflow?WorkflowID=#:WorkflowID#' title='Edit Workflow'><i class='icon st-icon-edit'></i></a>
                        #}#

                </span>
            </td>
        </tr>").Sortable().Resizable(resize => resize.Columns(true))
        .Events(events => events.DataBinding("onDataBinding").DataBound("onDataBound"))
        .DataSource(dataSource => dataSource
        .Ajax()
                                .PageSize(ItemsPerPage)
        .Read(read => read.Action("WorkFlowsViewRead", "WorkFlow").Data("additionalInfo")))
        )
    </div>
</div>

@section Scripts{
    <script type="text/javascript">


    var WEBSERVICE_URL = '@HttpContext.Current.Application["webservice_url"]';
    var Workflow_BASE_URL = '@Url.Content("~/Workflow/")';

    WorkflowTypes = {
        Active : 401,
        Draft: 402,
        Paused: 403,
        InActive: 404
    };

    WorkflowContactStage = {
        ContactsStarted : 1,
        ContactsInProgress : 2,
        ContactsCompleted : 3,
        ContactsOptedOut : 4
    }

    function WorkFlowStatusChange() {
        var value = this.value();
        localStorage.setItem("workflowstatus", value);
        var grid = $("#grid").data("kendoGrid");
        var psize = readCookie("workflowpagesize");
        console.log("chagned");
        grid.dataSource.query({ page: 1, pageSize: psize });
        appendCheckbox();
    }

    function getContactsInProgress(started,completed)
    {
        return started - completed;
    }

    function onDataBinding(arg) {
        setTimeout(function () {
            appendCheckbox();
            bindCheckboxchnage('chkworkflow');
        }, 200)
    }

    function onDataBound(e) {
        var dataSource = new kendo.data.DataSource({
            data: ToPageDropdown()
        });
        $("select[data-role='dropdownlist']").data('kendoDropDownList').setDataSource(dataSource);
        var colCount = $(".k-grid").find('table colgroup > col').length;
        if (e.sender.dataSource.view().length == 0) {
            e.sender.table.find('tbody')
                    .append('<tr><td colspan="' + colCount + '"><div class="notecordsfound"><div><i class="icon st-icon-browser-windows-2"></i></div>' +
                            '<span class="bolder smaller-90">No records found</span></div></td></tr>')
        }
    }

    function additionalInfo() {
        return {
            name: localStorage.getItem("workflowsearchtext") == null ? "" : localStorage.getItem("workflowsearchtext"),
            status: localStorage.getItem("workflowstatus") == null ? "" : localStorage.getItem("workflowstatus")
        }
    }


    var searchText;
    function createCookie(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
        } else var expires = "";
        document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
    }



    function DeleteWorkFlow(id) {
        alertifyReset("Delete Workflow", "Cancel");
        var array = [];
        array.push(id);
        var confirmMesaage = "Are you sure you want to delete this Workflow?";
        commondelete(confirmMesaage, array);
    }

    function FullEditWorkFlow(wfId){
        $.ajax({
            url: Workflow_BASE_URL+"IsWorkflowHasTimerActions",
            type: 'get',
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
            data: { "workflowId": wfId },

        }).then(function (response) {
            var filter = $.Deferred();
            if (response.success) {
                filter.resolve(response);
            } else {
                filter.reject(response.error);
            }
            return filter.promise();
        }).done(function (data) {
            if (data.response) {
                alertifyReset("Ok", "Cancel");
                var message = "[|You are editing a Workflow that has Timers. If you make changes to this workflow, a new version will be created and any Contacts that are In Progress will be Paused. Do you wish to continue|]";
                alertify.confirm(message, function (e) {
                    if (e) {
                        window.location.href = "/fulleditworkflow?WorkflowID=" + wfId;
                    }
                    else {
                        notifyError("[|You've clicked Cancel|]");
                    }
                });
            }
            else
                window.location.href = "/fulleditworkflow?WorkflowID=" + wfId;
        }).fail(function (error) {
            notifyError(error);
        });
    }





    function commondelete(confirmationMessage, workflowIDs) {

        alertify.confirm(confirmationMessage, function (e) {
            if (e) {

                var authToken = readCookie("accessToken");

                var jsondata = JSON.stringify({ 'WorkflowIDs': workflowIDs });
                pageLoader();
                $.ajax({
                    url: WEBSERVICE_URL + '/Workflows',
                    type: 'delete',
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", "Bearer " + authToken);
                    },
                    data: jsondata,
                    success: function (data) {
                        notifySuccess('Successfully deleted the workflow');
                        setTimeout(
                               function () {
                                   removepageloader();
                                   window.location.href = "/workflows";
                               }, setTimeOutTimer);
                    },
                    error: function (response) {
                        removepageloader();
                        notifyError(response.responseText);
                    }
                });


                //  varDeleteURL = BASE_URL + "DeleteUsers";
                //jQuery.ajaxSettings.traditional = true
                //$.ajax({
                //    url: varDeleteURL,
                //    type: 'POST',
                //    dataType: 'json',
                //    data: JSON.stringify({ Id: userIds }),
                //    contentType: 'application/json; charset=utf-8',
                //    success: function (data) {
                //        if (data.success === true) {
                //            notifySuccess("Successfully deleted the user");
                //            $("#grid").data("kendoGrid").dataSource.read();
                //        } else {
                //            notifySuccess("Unable to delete the user");
                //        }
                //    },
                //    error: function (x, y, z) {
                //    }
                //});
            }
            else {
                notifyError("You've clicked Cancel");
            }
        });
    }





    function GetWorkflowsBasedonsearch(e) {
        setTimeout(function () {
            var enterKeyPressCode = 13;
            if (searchText !== $("#txtSearch").val() || (searchText === $("#txtSearch").val() && e.keyCode == enterKeyPressCode))
                searchText = $("#txtSearch").val();
            else
                return;


            $filter = new Array();
            var grid = $("#grid").data("kendoGrid"),
                searchBox = $("#txtSearch").val(),
                WorkflowStatus = $("#WorkFlowStatus").val();
            localStorage.removeItem("workflowsearchtext");
            if ($.trim(searchBox).length > 2) {
                localStorage.removeItem("workflowsearchtext");
                createCookie("workflowpagenumber", 1, 1);
                localStorage.setItem("workflowsearchtext", searchBox);
                // $("#grid").data("kendoGrid").dataSource.read();
                var psize = readCookie("workflowpagesize");
                grid.dataSource.query({ page: 1, pageSize: psize });
                appendCheckbox();
            }
            else if ($.trim(searchBox).length === 0) {
                localStorage.removeItem("workflowsearchtext");
                $("#grid").data("kendoGrid").dataSource.read();
                appendCheckbox();
            }
        }, 1000);
    }



    $(document).ready(function () {
        localStorage.removeItem("workflowsearchtext");
        localStorage.removeItem("workflowstatus");
        function editUser() {
            checkedvalues = fnGetChkvalGrid('chkworkflow');
            if (checkedvalues != "") {
                if (checkedvalues.length == 1) {
                    window.location.href = "../edituser?userId=" + checkedvalues;
                }
                else {
                    notifyError("Please select only one user");
                }
            }
            else {
                notifyError("Please select only one user");
            }
        }


        $("#grid").data("kendoGrid").dataSource.read();
        removepageloader();
        tableMasterCheckBox('workflows-grid');
        var workflowview = @(Html.Raw(Json.Encode(Model)));
        var viewModel = new WorkflowListViewModel(workflowview, WEBSERVICE_URL,Workflow_BASE_URL);
        ko.applyBindings(viewModel);
    });


</script>
}
